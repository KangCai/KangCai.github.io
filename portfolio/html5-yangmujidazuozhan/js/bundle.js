var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
/**This class is automatically generated by LayaAirIDE, please do not make any modifications. */
var Visual_1 = require("./combat/Visual");
var Core_1 = require("./combat/Core");
var StatsLose_1 = require("./combat/StatsLose");
var StatsWin_1 = require("./combat/StatsWin");
var Achievement_1 = require("./menu/Achievement");
var Menu_1 = require("./menu/Menu");
var Rank_1 = require("./menu/Rank");
var Setting_1 = require("./menu/Setting");
var Mission_1 = require("./mission/Mission");
var Shop_1 = require("./shop/Shop");
/*
* 游戏初始化配置;
*/
var GameConfig = /** @class */ (function () {
    function GameConfig() {
    }
    GameConfig.init = function () {
        var reg = Laya.ClassUtils.regClass;
        reg("combat/Visual.ts", Visual_1.default);
        reg("combat/Core.ts", Core_1.default);
        reg("combat/StatsLose.ts", StatsLose_1.default);
        reg("combat/StatsWin.ts", StatsWin_1.default);
        reg("menu/Achievement.ts", Achievement_1.default);
        reg("menu/Menu.ts", Menu_1.default);
        reg("menu/Rank.ts", Rank_1.default);
        reg("menu/Setting.ts", Setting_1.default);
        reg("mission/Mission.ts", Mission_1.default);
        reg("shop/Shop.ts", Shop_1.default);
    };
    GameConfig.width = 1334;
    GameConfig.height = 750;
    GameConfig.scaleMode = "showall";
    GameConfig.screenMode = "horizontal";
    GameConfig.alignV = "middle";
    GameConfig.alignH = "center";
    GameConfig.startScene = "menu/Menu.scene";
    GameConfig.sceneRoot = "";
    GameConfig.debug = false;
    GameConfig.stat = false;
    GameConfig.physicsDebug = false;
    GameConfig.exportSceneToJson = true;
    return GameConfig;
}());
exports.default = GameConfig;
GameConfig.init();
},{"./combat/Core":7,"./combat/StatsLose":17,"./combat/StatsWin":18,"./combat/Visual":21,"./menu/Achievement":26,"./menu/Menu":27,"./menu/Rank":28,"./menu/Setting":29,"./mission/Mission":30,"./shop/Shop":31}],2:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GameConfig_1 = require("./GameConfig");
var Main = /** @class */ (function () {
    function Main() {
        //根据IDE设置初始化引擎		
        if (window["Laya3D"])
            Laya3D.init(GameConfig_1.default.width, GameConfig_1.default.height);
        else
            Laya.init(GameConfig_1.default.width, GameConfig_1.default.height, Laya["WebGL"]);
        Laya["Physics"] && Laya["Physics"].enable();
        Laya["DebugPanel"] && Laya["DebugPanel"].enable();
        Laya.stage.scaleMode = GameConfig_1.default.scaleMode;
        Laya.stage.screenMode = GameConfig_1.default.screenMode;
        Laya.stage.alignV = GameConfig_1.default.alignV;
        Laya.stage.alignH = GameConfig_1.default.alignH;
        //兼容微信不支持加载scene后缀场景
        Laya.URL.exportSceneToJson = GameConfig_1.default.exportSceneToJson;
        //打开调试面板（通过IDE设置调试模式，或者url地址增加debug=true参数，均可打开调试面板）
        if (GameConfig_1.default.debug || Laya.Utils.getQueryString("debug") == "true")
            Laya.enableDebugPanel();
        if (GameConfig_1.default.physicsDebug && Laya["PhysicsDebugDraw"])
            Laya["PhysicsDebugDraw"].enable();
        if (GameConfig_1.default.stat)
            Laya.Stat.show();
        Laya.alertGlobalError = true;
        //激活资源版本控制，version.json由IDE发布功能自动生成，如果没有也不影响后续流程
        Laya.ResourceVersion.enable("version.json", Laya.Handler.create(this, this.onVersionLoaded), Laya.ResourceVersion.FILENAME_VERSION);
    }
    Main.prototype.onVersionLoaded = function () {
        //激活大小图映射，加载小图的时候，如果发现小图在大图合集里面，则优先加载大图合集，而不是小图
        Laya.AtlasInfoManager.enable("fileconfig.json", Laya.Handler.create(this, this.onConfigLoaded));
    };
    Main.prototype.onConfigLoaded = function () {
        //加载IDE指定的场景
        GameConfig_1.default.startScene && Laya.Scene.open(GameConfig_1.default.startScene);
    };
    return Main;
}());
//激活启动类
new Main();
},{"./GameConfig":1}],3:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Global_1 = require("./Global");
var Consts_1 = require("../consts/Consts");
var AIFunc = /** @class */ (function (_super) {
    __extends(AIFunc, _super);
    function AIFunc() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    AIFunc.moveTo = function (owner, x, y) {
        Global_1.default.coreEnv.pfSys.moveTo(owner, x, y);
    };
    AIFunc.getItemByTask = function (task) {
        if (!Global_1.default.coreEnv || !Global_1.default.coreEnv.visual)
            return null;
        var visual = Global_1.default.coreEnv.visual;
        if (task === Consts_1.AIHeroTaskType.EGG)
            return visual.missionBox;
        if (task === Consts_1.AIHeroTaskType.FOOD)
            return visual.supplyFood;
        if (task === Consts_1.AIHeroTaskType.GUN)
            return visual.supplyGuns;
        return null;
    };
    return AIFunc;
}(Laya.Script));
exports.default = AIFunc;
},{"../consts/Consts":22,"./Global":8}],4:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Consts_1 = require("../consts/Consts");
var FoxStealEgg_1 = require("../spell/FoxStealEgg");
var AIFunc_1 = require("./AIFunc");
var Utils_1 = require("../consts/Utils");
var Player_1 = require("../consts/Player");
var AISystem = /** @class */ (function () {
    function AISystem(core) {
        this._allocatedCountList = [0, 0, 0]; // mission, supply, gun
        this._allocatedTaskDict = [{}, {}, {}, {}]; // task: {guid: hero} 
        this._allocatedGuidDict = {}; // {guid: task}
        this.core = core;
    }
    Object.defineProperty(AISystem.prototype, "allocatedCountList", {
        get: function () { return this._allocatedCountList; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AISystem.prototype, "totalAllocatedCount", {
        get: function () {
            var totalCount = 0;
            for (var i = 0; i < this.allocatedCountList.length; i++) {
                totalCount += this.allocatedCountList[i];
            }
            return totalCount;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AISystem.prototype, "leftToAllocateCount", {
        get: function () { return Player_1.default.getInstance().totalAllocateCount - this.totalAllocatedCount; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AISystem.prototype, "allocatedTaskDict", {
        get: function () { return this._allocatedTaskDict; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(AISystem.prototype, "allocatedGuidDict", {
        get: function () { return this._allocatedGuidDict; },
        enumerable: true,
        configurable: true
    });
    AISystem.prototype.initAI = function () {
        var mapLevel = Consts_1.Consts.MapLevel;
        for (var guidStr in this.core.unitSys.unitDict) {
            var guid = Number(guidStr);
            var unit = this.core.unitSys.findUnit(guid);
            if (!unit)
                continue;
            if (unit.type == Consts_1.UnitType.CHICKEN) {
                unit.nextLayTick = this.core.totalTickTime + 0.5 * 1000;
            }
            else if (unit.type == Consts_1.UnitType.FOX) {
                unit.nextAttackTick = this.core.totalTickTime + this._utilCalRandInterval(Consts_1.Consts.FoxAttackInterval[mapLevel], Consts_1.Consts.FoxAttackIntervalRange[mapLevel]);
            }
        }
    };
    AISystem.prototype.update = function (deltaTick) {
        this._updateHeroAI(deltaTick);
        this._updateChickenAI(deltaTick);
        this._updateFoxAI(deltaTick);
    };
    AISystem.prototype._updateHeroAI = function (deltaTick) {
        var visual = this.core.visual;
        for (var guidStr in this.core.unitSys.heroDict) {
            var guid = Number(guidStr);
            var hero = this.core.unitSys.heroDict[guid];
            if (!hero)
                continue;
            if (hero.ai.curTask === Consts_1.AIHeroTaskType.EGG) {
                // 状态更新
                if (hero.handState === Consts_1.HandStates.EGG)
                    hero.ai.curStage = Consts_1.AIHeroTaskStage.WORK;
                else
                    hero.ai.curStage = Consts_1.AIHeroTaskStage.READY;
                // 动作执行
                if (hero.ai.curStage === Consts_1.AIHeroTaskStage.READY) {
                    // 选择最近的鸡蛋
                    var neareastDist = null, targetEggImage = null;
                    for (var _i = 0, _a = [Consts_1.CoopLayer.TOP, Consts_1.CoopLayer.MID, Consts_1.CoopLayer.BOT]; _i < _a.length; _i++) {
                        var layer = _a[_i];
                        var outEggList = this.core.mapSys.outEggDict[layer];
                        var eggImgList = this.core.mapSys.eggImage[layer];
                        for (var idx in outEggList) {
                            var egg = outEggList[idx];
                            if (egg) {
                                var curEggImage = eggImgList[idx];
                                var curDist = Utils_1.default.calDist(hero.x, hero.y, curEggImage.x, curEggImage.y);
                                if (neareastDist === null || neareastDist > curDist) {
                                    neareastDist = curDist;
                                    targetEggImage = curEggImage;
                                }
                            }
                        }
                    }
                    if (targetEggImage) {
                        if (Utils_1.default.calDist(hero.x, hero.y, targetEggImage.x, targetEggImage.y) > 30)
                            AIFunc_1.default.moveTo(hero, targetEggImage.x, targetEggImage.y);
                        hero.readyToPickEggTick = this.core.totalTickTime;
                    }
                }
                else
                    AIFunc_1.default.moveTo(hero, visual.missionBox.x, visual.missionBox.y);
            }
            else if (hero.ai.curTask === Consts_1.AIHeroTaskType.FOOD) {
                // 状态更新
                if (hero.handState === Consts_1.HandStates.FOOD)
                    hero.ai.curStage = Consts_1.AIHeroTaskStage.WORK;
                else
                    hero.ai.curStage = Consts_1.AIHeroTaskStage.READY;
                // 动作执行
                if (hero.ai.curStage === Consts_1.AIHeroTaskStage.READY)
                    AIFunc_1.default.moveTo(hero, visual.supplyFood.x, visual.supplyFood.y);
                else {
                    // 选择草料最少的草
                    var coopLayerList = [Consts_1.CoopLayer.TOP, Consts_1.CoopLayer.MID, Consts_1.CoopLayer.BOT];
                    var grassList = [this.core.visual.topGrass, this.core.visual.midGrass, this.core.visual.botGrass];
                    var leastGrassNum = null, leastGrass = null;
                    for (var idx in coopLayerList) {
                        var curGrass = grassList[idx];
                        var curGrassNum = this.core.mapSys.grassLeftDict[coopLayerList[idx]] * 10000 + Math.abs(curGrass.y - hero.y);
                        if (leastGrassNum === null || leastGrassNum > curGrassNum) {
                            leastGrassNum = curGrassNum;
                            leastGrass = curGrass;
                        }
                    }
                    if (leastGrass)
                        AIFunc_1.default.moveTo(hero, leastGrass.x, leastGrass.y);
                }
            }
            else if (hero.ai.curTask === Consts_1.AIHeroTaskType.GUN) {
                // 状态更新
                if (hero.handState === Consts_1.HandStates.GUN)
                    hero.ai.curStage = Consts_1.AIHeroTaskStage.WORK;
                else
                    hero.ai.curStage = Consts_1.AIHeroTaskStage.READY;
                // 动作执行
                if (hero.ai.curStage === Consts_1.AIHeroTaskStage.READY)
                    AIFunc_1.default.moveTo(hero, visual.supplyGuns.x, visual.supplyGuns.y);
                else {
                    var nearestFox = null, nearestFoxDeltaY = null;
                    for (var guid_1 in this.core.unitSys.foxDict) {
                        var fox = this.core.unitSys.foxDict[guid_1];
                        if (fox.curSpell) {
                            var curDeltaY = Math.abs(fox.y - hero.y);
                            if (nearestFox === null || nearestFoxDeltaY > curDeltaY) {
                                nearestFoxDeltaY = curDeltaY;
                                nearestFox = fox;
                            }
                        }
                    }
                    if (nearestFox) {
                        AIFunc_1.default.moveTo(hero, 900, nearestFox.y);
                        if (hero.moveState === Consts_1.MoveStates.IDLE) {
                            this.core.animSys.setFaceDirectX(hero, -1);
                        }
                    }
                }
            }
            else {
                ;
            }
        }
    };
    AISystem.prototype._updateChickenAI = function (deltaTick) {
        var mapLevel = Consts_1.Consts.MapLevel;
        for (var guidStr in this.core.unitSys.chickenDict) {
            var guid = Number(guidStr);
            var unit = this.core.unitSys.chickenDict[guid];
            if (!unit)
                continue;
            // 母鸡定时生鸡蛋
            if (this.core.totalTickTime > unit.nextLayTick) {
                // 母鸡饥饿时无法生鸡蛋
                if (unit.moveState != Consts_1.MoveStates.CHECK_HUNGRY) {
                    unit.anim.play(0, false, Consts_1.MoveStates.CHICK_LAY);
                }
                unit.nextLayTick = this.core.totalTickTime + this._utilCalRandInterval(Consts_1.Consts.ChickenLayInterval[mapLevel], Consts_1.Consts.ChickenLayIntervalRange[mapLevel]);
            }
        }
    };
    AISystem.prototype._updateFoxAI = function (deltaTick) {
        var mapLevel = Consts_1.Consts.MapLevel;
        for (var guidStr in this.core.unitSys.foxDict) {
            var guid = Number(guidStr);
            var unit = this.core.unitSys.foxDict[guid];
            if (!unit)
                continue;
            // 狐狸定时攻击
            if (this.core.totalTickTime > unit.nextAttackTick) {
                this.core.spellSys.castSpell(unit, FoxStealEgg_1.default);
                unit.nextAttackTick = this.core.totalTickTime + this._utilCalRandInterval(Consts_1.Consts.FoxAttackInterval[mapLevel], Consts_1.Consts.FoxAttackIntervalRange[mapLevel]);
            }
        }
    };
    AISystem.prototype.animLabelCB = function (unit, label) {
        // console.log('xxx', label, unit.type, unit.anim);
        if (!unit)
            return;
        if (unit.type == Consts_1.UnitType.CHICKEN) {
            if (label == 'lay') {
                // 蛋出现
                unit.chickenLayEgg();
            }
            else if (label == 'end') {
                unit.anim.play(0, false, Consts_1.MoveStates.IDLE);
            }
        }
    };
    AISystem.prototype.allocateTask = function (task) {
        if (task === Consts_1.AIHeroTaskType.FREE)
            return;
        var taskItem = AIFunc_1.default.getItemByTask(task);
        if (taskItem === null)
            return;
        var freeHeroDict = this.allocatedTaskDict[Consts_1.AIHeroTaskType.FREE];
        // 对于当前鸡蛋任务，只找第一阶段，有多个就选距离目标最近的；对于其他，找当前阶段最早的距离目标最近的
        var nearest_dist = null, target_hero = null;
        for (var guid in freeHeroDict) {
            var hero = freeHeroDict[guid];
            if (!hero)
                continue;
            var curDist = Utils_1.default.calDist(hero.x, hero.y, taskItem.x, taskItem.y);
            if (nearest_dist === null || nearest_dist > curDist) {
                nearest_dist = curDist;
                target_hero = hero;
            }
        }
        if (!target_hero)
            return;
        this.allocatedTaskDict[task][target_hero.guid] = target_hero;
        this.allocatedTaskDict[Consts_1.AIHeroTaskType.FREE][target_hero.guid] = undefined;
        this.allocatedGuidDict[target_hero.guid] = task;
        var nameText = target_hero.getChildByName('name');
        return target_hero;
    };
    AISystem.prototype.freeTask = function (task) {
        if (task === Consts_1.AIHeroTaskType.FREE)
            return;
        var taskItem = AIFunc_1.default.getItemByTask(task);
        if (taskItem === null)
            return;
        var curHeroDict = this.allocatedTaskDict[task];
        // 对于当前鸡蛋任务，只找第一阶段，有多个就选距离当前目标最远的；对于其他，找当前阶段最早的距离当前目标最远的
        var farest_dist = null, target_hero = null;
        for (var guid in curHeroDict) {
            var hero = curHeroDict[guid];
            if (!hero)
                continue;
            var curDist = Utils_1.default.calDist(hero.x, hero.y, taskItem.x, taskItem.y);
            if (farest_dist === null || farest_dist < curDist) {
                farest_dist = curDist;
                target_hero = hero;
            }
        }
        if (!target_hero)
            return;
        var curTask = this.allocatedGuidDict[target_hero.guid];
        this.allocatedTaskDict[curTask][target_hero.guid] = undefined;
        this.allocatedTaskDict[Consts_1.AIHeroTaskType.FREE][target_hero.guid] = target_hero;
        this.allocatedGuidDict[target_hero.guid] = Consts_1.AIHeroTaskType.FREE;
    };
    AISystem.prototype._utilCalRandInterval = function (interval, intervalRange) {
        return interval + Math.random() * intervalRange;
    };
    return AISystem;
}());
exports.default = AISystem;
},{"../consts/Consts":22,"../consts/Player":23,"../consts/Utils":25,"../spell/FoxStealEgg":32,"./AIFunc":3}],5:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Consts_1 = require("../consts/Consts");
var AnimSystem = /** @class */ (function () {
    function AnimSystem(core) {
        this._moveInfo = [];
        this.core = core;
    }
    AnimSystem.prototype.update = function (deltaTick) {
        for (var guidStr in this.core.unitSys.heroDict) {
            var hero = this.core.unitSys.findUnit(Number(guidStr));
            if (hero.carriedNum <= 0)
                hero.handState = Consts_1.HandStates.HAND;
        }
        var dx, dy;
        for (var guidStr in this.core.unitSys.unitDict) {
            var guid = Number(guidStr);
            var unit = this.core.unitSys.findUnit(guid);
            if (!unit)
                continue;
            var rig = unit.getComponent(Laya.RigidBody);
            if (!rig)
                continue;
            dx = rig.linearVelocity.x;
            dy = rig.linearVelocity.y;
            // 控制碰撞状态
            var collider = unit.getComponent(Laya.ColliderBase);
            if (dy < 0) {
                collider.isSensor = true;
            }
            else if (!unit.ignoreCollider) {
                collider.isSensor = false;
            }
            // 设置朝向
            if (dx > 0) {
                unit.anim.scaleX = 1.0;
                unit.directionX = 1;
            }
            else if (dx < 0) {
                unit.anim.scaleX = -1.0;
                unit.directionX = -1;
            }
            // 设置运动状态
            var moveState = void 0;
            if (dy > 0) {
                moveState = Consts_1.MoveStates.JUMP_DOWN;
            }
            else if (dy < 0) {
                moveState = Consts_1.MoveStates.JUMP_UP;
            }
            else if (!unit.contactCollider) {
                ;
            }
            else if (dx != 0) {
                moveState = Consts_1.MoveStates.RUN;
            }
            else {
                moveState = Consts_1.MoveStates.IDLE;
            }
            unit.moveState = moveState;
        }
    };
    AnimSystem.prototype.setFaceDirectX = function (unit, directX) {
        unit.directionX = directX;
        unit.anim.scaleX = directX;
    };
    return AnimSystem;
}());
exports.default = AnimSystem;
},{"../consts/Consts":22}],6:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Consts_1 = require("../consts/Consts");
var Unit_1 = require("./Unit");
var BulletSystem = /** @class */ (function () {
    function BulletSystem(core) {
        this._bulletGuidCount = 1;
        this._bulletDict = {};
        this.core = core;
        Laya.loader.load(Consts_1.Consts.ResBulletURL);
    }
    Object.defineProperty(BulletSystem.prototype, "bulletGuidCount", {
        get: function () { return this._bulletGuidCount; },
        set: function (bulletGuidCount) { this._bulletGuidCount = bulletGuidCount; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BulletSystem.prototype, "bulletDict", {
        get: function () { return this._bulletDict; },
        enumerable: true,
        configurable: true
    });
    BulletSystem.prototype.createBullet = function (x, y, directX, directY) {
        var bullet = Laya.Pool.getItemByCreateFun('bullet', this._createBulletRes, this);
        bullet.bulletGuid = this.bulletGuidCount;
        bullet.zOrder = 10;
        this.bulletGuidCount += 1;
        this.bulletDict[bullet.bulletGuid] = bullet;
        this.core.visual.scene.addChild(bullet);
        bullet.pos(x, y);
        bullet.width = bullet.height = 6;
        var bulletRig = bullet.rig;
        bulletRig.setVelocity({ x: directX, y: directY });
    };
    BulletSystem.prototype._createBulletRes = function () {
        return new Bullet(this.core);
    };
    BulletSystem.prototype.delBullet = function (guid) {
        if (!this.bulletDict[guid])
            return;
        this.core.visual.scene.removeChild(this.bulletDict[guid]);
        Laya.Pool.recover('bullet', this.bulletDict[guid]);
        delete this.bulletDict[guid];
    };
    return BulletSystem;
}());
exports.default = BulletSystem;
var Bullet = /** @class */ (function (_super) {
    __extends(Bullet, _super);
    function Bullet(core) {
        var _this = _super.call(this, Consts_1.Consts.ResBulletURL[0]) || this;
        _this.core = core;
        // 添加触发器
        _this._rig = _this.addComponent(Laya.RigidBody);
        _this.rig.allowRotation = false;
        _this.rig.type = 'dynamic';
        _this.rig.gravityScale = 0;
        _this.rig.bullet = true;
        _this._collider = _this.addComponent(Laya.BoxCollider);
        _this.collider.isSensor = true;
        var comp = _this.addComponent(BulletModel);
        comp.core = _this.core;
        return _this;
    }
    Object.defineProperty(Bullet.prototype, "bulletGuid", {
        get: function () { return this._bulletGuid; },
        set: function (bulletGuid) { this._bulletGuid = bulletGuid; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Bullet.prototype, "rig", {
        get: function () { return this._rig; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Bullet.prototype, "collider", {
        get: function () { return this._collider; },
        enumerable: true,
        configurable: true
    });
    return Bullet;
}(Laya.Image));
var BulletModel = /** @class */ (function (_super) {
    __extends(BulletModel, _super);
    function BulletModel() {
        return _super.call(this) || this;
    }
    BulletModel.prototype.onTriggerEnter = function (other, self, contact) {
        var selfOwner = self.owner;
        if (other.owner instanceof Unit_1.default && other.owner.type == Consts_1.UnitType.FOX) {
            this.core.bulletSys.delBullet(selfOwner.bulletGuid);
            this.core.spellSys.breakSpell(other.owner);
        }
        else if (other.owner.name == 'boundWall') {
            this.core.bulletSys.delBullet(selfOwner.bulletGuid);
        }
    };
    return BulletModel;
}(Laya.Script));
},{"../consts/Consts":22,"./Unit":19}],7:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Consts_1 = require("../consts/Consts");
var UnitSystem_1 = require("./UnitSystem");
var MoveSystem_1 = require("./MoveSystem");
var InputSystem_1 = require("./InputSystem");
var AnimSystem_1 = require("./AnimSystem");
var MapSystem_1 = require("./MapSystem");
var AISystem_1 = require("./AISystem");
var SpellSystem_1 = require("./SpellSystem");
var BulletSystem_1 = require("./BulletSystem");
var Global_1 = require("./Global");
var PathFindingSystem_1 = require("./PathFindingSystem");
var Player_1 = require("../consts/Player");
var Core = /** @class */ (function (_super) {
    __extends(Core, _super);
    function Core() {
        var _this = _super.call(this) || this;
        _this._lastTickTime = -1;
        _this._totalTickTime = 0;
        _this._isGameOver = false;
        _this._paused = false;
        _this._unitSys = new UnitSystem_1.default(_this);
        _this._moveSys = new MoveSystem_1.default(_this);
        _this._inputSys = new InputSystem_1.default(_this);
        _this._animSys = new AnimSystem_1.default(_this);
        _this._mapSys = new MapSystem_1.default(_this);
        _this._aiSys = new AISystem_1.default(_this);
        _this._spellSys = new SpellSystem_1.default(_this);
        _this._bulletSys = new BulletSystem_1.default(_this);
        _this._pfSys = new PathFindingSystem_1.default(_this);
        return _this;
    }
    Core.prototype.onEnable = function () {
        Global_1.default.coreEnv = this;
        this._visual = this.owner;
        this.mapSys.initMap();
        this.aiSys.initAI();
        laya.media.SoundManager.stopMusic();
        Laya.timer.frameOnce(1, this, this.init);
    };
    Core.prototype.init = function () {
        this.paused = true;
        this.visual.readyText.text = Consts_1.Consts.MissionTitle[Consts_1.Consts.MapLevel];
        if (Consts_1.Consts.FoxAttackInterval[Consts_1.Consts.MapLevel] < Consts_1.Consts.MissionTime[Consts_1.Consts.MapLevel] * 1000)
            this.visual.readyTips.text = 'Tips: 攻击狐狸可获得额外1秒时间';
        else
            this.visual.readyTips.text = '';
        var textList = [this.visual.readyText, this.visual.readyTips];
        var cb = null;
        for (var i = 0; i < textList.length; i++) {
            var xTo = textList[i].x, yTo = textList[i].y - 150;
            if (i == 0)
                cb = this.initCB;
            else
                cb = null;
            var props = { x: xTo, y: yTo, ease: Laya.Ease.linearOut, complete: Laya.Handler.create(this, cb) };
            Laya.Tween.to(textList[i], props, 1200);
        }
    };
    Core.prototype.initCB = function () {
        var readyList = [this.visual.readyBox, this.visual.readyText, this.visual.readyTips];
        for (var i = 0; i < readyList.length; i++) {
            readyList[i].visible = false;
        }
        Laya.timer.once(500, this, this.initCBCB);
    };
    Core.prototype.initCBCB = function () {
        // 创建主控单位
        var midX = Laya.stage.width / 2.0, midY = Laya.stage.height / 2.0;
        for (var i = 0; i < Player_1.default.getInstance().totalAllocateCount; i++) {
            console.log(i);
            this.unitSys.createUnit(Consts_1.UnitType.HERO, midX + Consts_1.Consts.HeroBornPos[i][0], midY + Consts_1.Consts.HeroBornPos[i][1]);
        }
        this.paused = false;
        // 播放音乐
        laya.media.SoundManager.playMusic('custom/combat_bg.mp3');
        this.inputSys.initInputEvent();
    };
    Core.prototype.onUpdate = function () {
        if (this.paused)
            return;
        var deltaTick = Laya.timer.delta;
        this._lastTickTime = this._totalTickTime;
        this._totalTickTime += deltaTick;
        // 顺序厘清
        this.inputSys.update(deltaTick);
        this.mapSys.update(deltaTick);
        this.aiSys.update(deltaTick);
        this.spellSys.update(deltaTick);
        this.moveSys.update(deltaTick);
        this.animSys.update(deltaTick);
    };
    Core.prototype.onDisable = function () {
    };
    Object.defineProperty(Core.prototype, "totalTickTime", {
        get: function () { return this._totalTickTime; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Core.prototype, "lastTickTime", {
        get: function () { return this._lastTickTime; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Core.prototype, "visual", {
        get: function () { return this._visual; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Core.prototype, "isGameOver", {
        get: function () { return this._isGameOver; },
        set: function (isGameOver) { this._isGameOver = isGameOver; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Core.prototype, "paused", {
        get: function () { return this._paused; },
        set: function (paused) { this._paused = paused; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Core.prototype, "unitSys", {
        get: function () { return this._unitSys; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Core.prototype, "moveSys", {
        get: function () { return this._moveSys; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Core.prototype, "inputSys", {
        get: function () { return this._inputSys; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Core.prototype, "animSys", {
        get: function () { return this._animSys; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Core.prototype, "mapSys", {
        get: function () { return this._mapSys; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Core.prototype, "aiSys", {
        get: function () { return this._aiSys; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Core.prototype, "spellSys", {
        get: function () { return this._spellSys; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Core.prototype, "bulletSys", {
        get: function () { return this._bulletSys; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Core.prototype, "pfSys", {
        get: function () { return this._pfSys; },
        enumerable: true,
        configurable: true
    });
    return Core;
}(Laya.Script));
exports.default = Core;
},{"../consts/Consts":22,"../consts/Player":23,"./AISystem":4,"./AnimSystem":5,"./BulletSystem":6,"./Global":8,"./InputSystem":12,"./MapSystem":13,"./MoveSystem":14,"./PathFindingSystem":15,"./SpellSystem":16,"./UnitSystem":20}],8:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Global = /** @class */ (function (_super) {
    __extends(Global, _super);
    function Global() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return Global;
}(Laya.Script));
exports.default = Global;
},{}],9:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Unit_1 = require("./Unit");
var Consts_1 = require("../consts/Consts");
var HeroFunc_1 = require("./HeroFunc");
var Hero = /** @class */ (function (_super) {
    __extends(Hero, _super);
    function Hero(core) {
        var _this = _super.call(this, core, Consts_1.UnitType.HERO) || this;
        _this._eggCarried = null;
        _this._lastShootTick = 0;
        _this._atkSpeed = 1.0;
        _this._readyToPickEggTick = null;
        _this._number = null;
        _this._ai = null;
        _this._carriedNum = 0;
        return _this;
    }
    Hero.prototype.init = function () {
        _super.prototype.init.call(this);
        this.core.unitSys.heroCount += 1;
        this.handState = Consts_1.HandStates.HAND;
        this.number = this.core.unitSys.heroCount - 1;
        // 加名字区分
        var nameText = this.addChild(new Laya.Text());
        nameText.name = 'name';
        nameText.text = Consts_1.Consts.HeroName[this.number];
        nameText.fontSize = 52;
        nameText.bold = true;
        nameText.color = Consts_1.Consts.HeroColor[this.number];
        nameText.pivot(nameText.width / 2.0, nameText.height / 2.0);
        nameText.align = 'center';
        nameText.pos(0, -150);
        nameText.stroke = 4;
        nameText.strokeColor = '#2a2929';
        // 加刚体和碰撞
        this._rig = this.addComponent(Laya.RigidBody);
        this._rig.allowRotation = false;
        this._rig.type = 'dynamic';
        this._rig.gravityScale = 2.0;
        this._rig.bullet = true;
        this._rig.category = Math.pow(2, this.number + 1);
        this._rig.mask = 1;
        this._collider = this.addComponent(Laya.BoxCollider);
        this._collider.width = 25;
        this._collider.height = 110;
        var comp = this.addComponent(HeroFunc_1.default);
        comp.core = this.core;
    };
    Object.defineProperty(Hero.prototype, "handState", {
        get: function () { return this._handState; },
        set: function (handState) {
            if (this._handState != handState) {
                this._handState = handState;
                this.updateAnim();
                this.carriedNum = 1.0;
            }
        },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(Hero.prototype, "number", {
        get: function () { return this._number; },
        set: function (number) { this._number = number; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(Hero.prototype, "eggCarried", {
        get: function () { return this._eggCarried; },
        set: function (egg) { this._eggCarried = egg; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Hero.prototype, "lastShootTick", {
        get: function () { return this._lastShootTick; },
        set: function (lastShootTick) { this._lastShootTick = lastShootTick; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Hero.prototype, "atkSpeed", {
        get: function () { return this._atkSpeed; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Hero.prototype, "readyToPickEggTick", {
        get: function () { return this._readyToPickEggTick; },
        set: function (readyToPickEggTick) { this._readyToPickEggTick = readyToPickEggTick; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Hero.prototype, "ai", {
        get: function () { return this._ai; },
        set: function (ai) { this._ai = ai; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Hero.prototype, "carriedNum", {
        get: function () { return this._carriedNum; },
        set: function (carriedNum) { this._carriedNum = carriedNum; },
        enumerable: true,
        configurable: true
    });
    Hero.prototype.updateAnim = function () {
        if (!this.moveState || !this.handState)
            return;
        var animName = String(this.moveState) + String(this.handState);
        this.anim.play(0, true, animName);
    };
    ;
    return Hero;
}(Unit_1.default));
exports.default = Hero;
},{"../consts/Consts":22,"./HeroFunc":11,"./Unit":19}],10:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Consts_1 = require("../consts/Consts");
var Global_1 = require("./Global");
var HeroAI = /** @class */ (function () {
    function HeroAI(owner) {
        this._owner = null;
        this._curStage = null;
        this._owner = owner;
        var aiSys = Global_1.default.coreEnv.aiSys;
        aiSys.allocatedTaskDict[Consts_1.AIHeroTaskType.FREE][owner.guid] = owner;
        aiSys.allocatedGuidDict[owner.guid] = Consts_1.AIHeroTaskType.FREE;
    }
    Object.defineProperty(HeroAI.prototype, "owner", {
        get: function () { return this._owner; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HeroAI.prototype, "curTask", {
        get: function () {
            var aiSys = Global_1.default.coreEnv.aiSys;
            return aiSys.allocatedGuidDict[this.owner.guid];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(HeroAI.prototype, "curStage", {
        get: function () { return this._curStage; },
        set: function (curStage) { this._curStage = curStage; },
        enumerable: true,
        configurable: true
    });
    return HeroAI;
}());
exports.default = HeroAI;
},{"../consts/Consts":22,"./Global":8}],11:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Consts_1 = require("../consts/Consts");
var Utils_1 = require("../consts/Utils");
var EggColldierMap = {
    'egg11': [Consts_1.CoopLayer.TOP, 0],
    'egg12': [Consts_1.CoopLayer.TOP, 1],
    'egg21': [Consts_1.CoopLayer.MID, 0],
    'egg22': [Consts_1.CoopLayer.MID, 1],
    'egg31': [Consts_1.CoopLayer.BOT, 0],
    'egg32': [Consts_1.CoopLayer.BOT, 1],
};
var ColliderToCoopLayer = {
    'lan11': Consts_1.CoopLayer.TOP,
    'lan12': Consts_1.CoopLayer.MID,
    'lan13': Consts_1.CoopLayer.BOT,
};
var HeroFunc = /** @class */ (function (_super) {
    __extends(HeroFunc, _super);
    function HeroFunc() {
        var _this = _super.call(this) || this;
        _this._contactDict = {};
        _this._count = 0;
        return _this;
    }
    Object.defineProperty(HeroFunc.prototype, "core", {
        get: function () { return this._core; },
        set: function (core) { this._core = core; },
        enumerable: true,
        configurable: true
    });
    HeroFunc.prototype.onTriggerEnter = function (other, self, contact) {
        var _a;
        // 获取主人物所在层数
        this._owner.coopLayer = ColliderToCoopLayer[other.owner.name];
        // 其它事件
        if (other.label == 'item') {
            // 物品相关触发器事件
            var item = other.owner;
            if (item.name == 'supplyGuns') {
                this._owner.handState = Consts_1.HandStates.GUN;
            }
            else if (item.name == 'supplyShovels') {
                this._owner.handState = Consts_1.HandStates.SHOVEL;
            }
            else if (item.name == 'missionBox') {
                if (this._owner.handState == Consts_1.HandStates.EGG) {
                    this._owner.handState = Consts_1.HandStates.HAND;
                    this.core.mapSys.putEggInBox(this._owner);
                }
            }
            else if (item.name == 'supplyFood') {
                if (this._owner.handState == Consts_1.HandStates.FOOD) {
                    ;
                }
                else {
                    this._owner.handState = Consts_1.HandStates.FOOD;
                }
                // else if (this._owner.handState == HandStates.SHOVEL) {
                //     this._owner.handState = HandStates.FOOD;
                // } else {
                //     Utils.notifyMessage(this.core, MessageType.FOOD_NEED_SHOVEL);
                // }
            }
            else if (item.name.length > 3 && item.name.substr(0, 3) == 'egg') {
                if (item.visible && this._owner.handState != Consts_1.HandStates.EGG) {
                    if (this._owner.readyToPickEggTick != null && this.core.totalTickTime - this._owner.readyToPickEggTick < 0.1) {
                        this._owner.readyToPickEggTick = this.core.totalTickTime;
                        var layer = void 0, idx = void 0;
                        _a = EggColldierMap[item.name], layer = _a[0], idx = _a[1];
                        this.core.mapSys.takeEggOutOfCoop(this._owner, layer, idx);
                        this._owner.handState = Consts_1.HandStates.EGG;
                    }
                }
            }
            else if (item.name.length > 5 && item.name.substr(0, 5) == 'grass') {
                if (this._owner.handState == Consts_1.HandStates.FOOD) {
                    var coopLayer = void 0;
                    if (item.name == 'grassTop')
                        coopLayer = Consts_1.CoopLayer.TOP;
                    else if (item.name == 'grassMid')
                        coopLayer = Consts_1.CoopLayer.MID;
                    else if (item.name == 'grassBot')
                        coopLayer = Consts_1.CoopLayer.BOT;
                    if (coopLayer) {
                        var chicken = Utils_1.default.getChickenByCoopLayer(this.core, coopLayer);
                        this.core.mapSys.supplyFood(this._owner, chicken);
                    }
                }
            }
            this._count += 1;
        }
        else {
            if (other.label == 'ignore') {
                // 接触到左右墙的标志
                this._owner.doContactWall = true;
                return;
            }
            // 重力落地事件
            if (self.isSensor) {
                if (this._owner.ignoreCollider != other) {
                    this._owner.ignoreCollider = null;
                }
                else {
                    return;
                }
            }
            this._owner.contactCollider = other;
        }
    };
    HeroFunc.prototype.onTriggerExit = function (other, self, contact) {
        if (other.label == 'item') {
            ;
        }
        else {
            if (other.label == 'ignore') {
                this._owner.doContactWall = false;
                return;
            }
            this._owner.contactCollider = null;
        }
    };
    HeroFunc.prototype.onEnable = function () {
        this._owner = this.owner;
    };
    HeroFunc.prototype.onDisable = function () {
    };
    return HeroFunc;
}(Laya.Script));
exports.default = HeroFunc;
},{"../consts/Consts":22,"../consts/Utils":25}],12:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Global_1 = require("./Global");
var Consts_1 = require("../consts/Consts");
var InputSystem = /** @class */ (function () {
    function InputSystem(core) {
        this._leftBtnDelta = null;
        this._keyDict = {};
        this._originalAlphaList = [];
        this.core = core;
    }
    Object.defineProperty(InputSystem.prototype, "originalYaoganPos", {
        get: function () { return this._originalYaoganPos; },
        set: function (originalYaoganPos) { this._originalYaoganPos = originalYaoganPos; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputSystem.prototype, "btnDownPosRecorder", {
        get: function () { return this._btnDownPosRecorder; },
        set: function (btnDownPosRecorder) { this._btnDownPosRecorder = btnDownPosRecorder; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputSystem.prototype, "leftBtnDelta", {
        get: function () { return this._leftBtnDelta; },
        set: function (leftBtnDelta) { this._leftBtnDelta = leftBtnDelta; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(InputSystem.prototype, "originalAlphaList", {
        get: function () { return this._originalAlphaList; },
        enumerable: true,
        configurable: true
    });
    InputSystem.prototype.initInputEvent = function () {
        // 初始化变量
        this._initVariable();
        // 监听键盘事件
        this._listenKeyBoard();
        // 监听触屏时间
        this._listenBtnEvent();
    };
    InputSystem.prototype.update = function (deltaTick) {
        var player = this.core.unitSys.player;
        if (!player)
            return;
        // 键盘事件
        var vdx = null, vdy = null;
        for (var keyCodeStr in this._keyDict) {
            if (keyCodeStr == 'A') {
                vdx = -1;
                vdy = 0;
            }
            else if (keyCodeStr == 'D') {
                vdx = 1;
                vdy = 0;
            }
            else if (keyCodeStr == 'S') {
                vdx = 0;
                vdy = 1;
            }
            else if (keyCodeStr == 'W') {
                vdx = 0;
                vdy = -1;
            }
            else if (keyCodeStr == 'J') {
                player.readyToPickEggTick = this.core.totalTickTime;
            }
            else
                continue;
            if (vdx != null && vdy != null) {
                this.core.moveSys.moveInfo.push([player.guid, vdx, vdy]);
            }
        }
    };
    InputSystem.prototype._initVariable = function () {
        // 记录原始alpha值
        var visual = this.core.visual;
        var btnList = [visual.missionPlus, visual.missionMinus, visual.supplyPlus, visual.supplyMinus, visual.gunPlus, visual.gunMinus];
        for (var idx = 0; idx < btnList.length; idx++) {
            this.originalAlphaList.push(btnList[idx].alpha);
        }
    };
    InputSystem.prototype._listenKeyBoard = function () {
        // 添加键盘按下事件,一直按着某按键则会不断触发
        Laya.stage.on(Laya.Event.KEY_DOWN, this, this._onKeyDown);
        Laya.stage.on(Laya.Event.KEY_UP, this, this._onKeyUp);
    };
    InputSystem.prototype._listenBtnEvent = function () {
        var visual = this.core.visual;
        var btnList = [visual.missionPlus, visual.missionMinus, visual.supplyPlus, visual.supplyMinus, visual.gunPlus, visual.gunMinus];
        for (var idx = 0; idx < btnList.length; idx++) {
            btnList[idx].on(Laya.Event.MOUSE_DOWN, this, this._onDown, [btnList[idx], idx, true]);
            btnList[idx].on(Laya.Event.MOUSE_UP, this, this._onUp, [btnList[idx], idx, true]);
            btnList[idx].on(Laya.Event.MOUSE_OUT, this, this._onUp, [btnList[idx], idx, false]);
        }
        this._refreshItemState();
    };
    InputSystem.prototype._onDown = function (btn, idx, isSure) {
        if (btn.alpha !== this.originalAlphaList[idx])
            return;
        btn.scale(1.1, 1.1);
    };
    InputSystem.prototype._onUp = function (btn, idx, isSure) {
        btn.scale(1.0, 1.0);
        if (btn.alpha !== this.originalAlphaList[idx])
            return;
        if (!isSure)
            return;
        var isPlus = idx % 2 == 0;
        var aiSys = Global_1.default.coreEnv.aiSys;
        var itemIdx = Math.floor(idx / 2);
        var taskTypeList = [Consts_1.AIHeroTaskType.EGG, Consts_1.AIHeroTaskType.FOOD, Consts_1.AIHeroTaskType.GUN];
        if (isPlus) {
            aiSys.allocatedCountList[itemIdx] += 1;
            aiSys.allocateTask(taskTypeList[itemIdx]);
        }
        else {
            aiSys.allocatedCountList[itemIdx] -= 1;
            aiSys.freeTask(taskTypeList[itemIdx]);
        }
        this._refreshItemState();
    };
    InputSystem.prototype._refreshItemState = function () {
        var visual = this.core.visual;
        var aiSys = Global_1.default.coreEnv.aiSys;
        var btnList = [visual.missionPlus, visual.missionMinus, visual.supplyPlus, visual.supplyMinus, visual.gunPlus, visual.gunMinus];
        for (var idx = 0; idx < btnList.length; idx++) {
            var btn = btnList[idx];
            var isPlus = idx % 2 == 0;
            if (isPlus && aiSys.leftToAllocateCount <= 0) {
                btn.alpha = 0.3;
                continue;
            }
            var itemIdx = Math.floor(idx / 2);
            var curItemAllocatedCount = aiSys.allocatedCountList[itemIdx];
            if (!isPlus && curItemAllocatedCount <= 0) {
                btn.alpha = 0.3;
                continue;
            }
            btn.alpha = this.originalAlphaList[idx];
        }
        var infoList = [visual.allocateMission, visual.allocateSupply, visual.allocateGun];
        for (var idx = 0; idx < infoList.length; idx++) {
            infoList[idx].text = String(aiSys.allocatedCountList[idx]);
        }
        visual.toAllocate.text = String(aiSys.leftToAllocateCount);
    };
    InputSystem.prototype._onKeyDown = function (e) {
        var keyCodeStr = String.fromCharCode(e["keyCode"]);
        this._keyDict[keyCodeStr] = true;
    };
    InputSystem.prototype._onKeyUp = function (e) {
        var keyCodeStr = String.fromCharCode(e["keyCode"]);
        if (!this._keyDict[keyCodeStr])
            return;
        delete this._keyDict[keyCodeStr];
    };
    return InputSystem;
}());
exports.default = InputSystem;
},{"../consts/Consts":22,"./Global":8}],13:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Consts_1 = require("../consts/Consts");
var Utils_1 = require("../consts/Utils");
var Stats_1 = require("../consts/Stats");
var Player_1 = require("../consts/Player");
var MapSystem = /** @class */ (function (_super) {
    __extends(MapSystem, _super);
    function MapSystem(core) {
        var _this = _super.call(this) || this;
        _this._inEggDict = {};
        _this._outEggDict = {};
        _this._outEggImage = {};
        _this._inEggTextureURL = {};
        _this._grassLeftDict = {};
        _this.core = core;
        return _this;
    }
    Object.defineProperty(MapSystem.prototype, "inEggDict", {
        get: function () { return this._inEggDict; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MapSystem.prototype, "outEggDict", {
        get: function () { return this._outEggDict; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MapSystem.prototype, "eggImage", {
        get: function () { return this._outEggImage; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MapSystem.prototype, "inEggTextureURL", {
        get: function () { return this._inEggTextureURL; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(MapSystem.prototype, "grassLeftDict", {
        get: function () { return this._grassLeftDict; },
        enumerable: true,
        configurable: true
    });
    MapSystem.prototype.update = function (deltaTick) {
        if (this.core.isGameOver)
            return;
        this.updateEggState();
        this.updateTimeDisplay();
    };
    MapSystem.prototype.initMap = function () {
        var mapLevel = Consts_1.Consts.MapLevel;
        // 变量初始化
        Stats_1.default.initVariable(this.core);
        for (var _i = 0, _a = Consts_1.Consts.ActiveCoopLayer[mapLevel]; _i < _a.length; _i++) {
            var layer = _a[_i];
            this.inEggDict[layer] = [];
            this.outEggDict[layer] = [null, null];
            this.inEggTextureURL[layer] = null;
        }
        this.eggImage[Consts_1.CoopLayer.TOP] = [this.core.visual.egg11, this.core.visual.egg12, this.core.visual.topEggs];
        this.eggImage[Consts_1.CoopLayer.MID] = [this.core.visual.egg21, this.core.visual.egg22, this.core.visual.midEggs];
        this.eggImage[Consts_1.CoopLayer.BOT] = [this.core.visual.egg31, this.core.visual.egg32, this.core.visual.botEggs];
        // 创建鸡
        var topGrass = this.core.visual.topGrass;
        var topChicken = this.core.unitSys.createUnit(Consts_1.UnitType.CHICKEN, topGrass.x, topGrass.y - 35);
        topChicken.coopLayer = Consts_1.CoopLayer.TOP;
        var midGrass = this.core.visual.midGrass;
        var midChicken = this.core.unitSys.createUnit(Consts_1.UnitType.CHICKEN, midGrass.x, midGrass.y - 35);
        midChicken.coopLayer = Consts_1.CoopLayer.MID;
        var botGrass = this.core.visual.botGrass;
        var botChicken = this.core.unitSys.createUnit(Consts_1.UnitType.CHICKEN, botGrass.x, botGrass.y - 35);
        botChicken.coopLayer = Consts_1.CoopLayer.BOT;
        // 创建狐狸
        var fox = this.core.unitSys.createUnit(Consts_1.UnitType.FOX, midGrass.x, midGrass.y - 20);
        fox.coopLayer = Consts_1.CoopLayer.MID;
        // 文字UI层级
        this.core.visual.statsTime.zOrder = this.core.visual.statsBox.zOrder = 100;
        // 非频繁 update 逻辑
        var coopLayerList = [Consts_1.CoopLayer.TOP, Consts_1.CoopLayer.MID, Consts_1.CoopLayer.BOT];
        for (var idx in coopLayerList)
            this.grassLeftDict[coopLayerList[idx]] = 1.0;
        Laya.timer.loop(100, this, this.delta100Update);
        // 监听攻击狐狸事件，延长时间
        Laya.stage.on(Consts_1.EventType.ATTACK_FOX, this, this._onAttackFox);
    };
    MapSystem.prototype.supplyFood = function (owner, chicken) {
        var deltaCost = (1.0 - this.grassLeftDict[Number(chicken.coopLayer)]) * 1.0;
        Stats_1.default.countHungry += deltaCost;
        owner.carriedNum -= 1.0;
        this.grassLeftDict[Number(chicken.coopLayer)] = 1.0;
    };
    MapSystem.prototype.delta100Update = function () {
        // 鸡饥饿度相关更新
        var coopLayerList = [Consts_1.CoopLayer.TOP, Consts_1.CoopLayer.MID, Consts_1.CoopLayer.BOT];
        var coopLayerToChickenDict = {};
        for (var guid in this.core.unitSys.chickenDict) {
            var chicken = this.core.unitSys.chickenDict[guid];
            coopLayerToChickenDict[Number(chicken.coopLayer)] = chicken;
        }
        for (var idx in coopLayerList) {
            var coopLayer = coopLayerList[idx];
            var before = this.grassLeftDict[coopLayer];
            var after = before - 100.0 / Consts_1.Consts.GrassUseTime;
            if (before <= 0)
                after = before;
            this.grassLeftDict[coopLayer] = after;
            // 更新鸡状态
            var targetChicken = coopLayerToChickenDict[coopLayer];
            if (targetChicken.moveState == Consts_1.MoveStates.IDLE && after <= 0) {
                targetChicken.moveState = Consts_1.MoveStates.CHECK_HUNGRY;
            }
            else if (targetChicken.moveState == Consts_1.MoveStates.CHECK_HUNGRY && after > 0) {
                targetChicken.moveState = Consts_1.MoveStates.IDLE;
            }
            // 更新食草状态
            var grass = Utils_1.default.getGrassByCoopLayer(this.core, coopLayer);
            var newScale = 0.3 + 0.7 * after;
            grass.scale(newScale, newScale);
        }
    };
    MapSystem.prototype.updateTimeDisplay = function () {
        var _a;
        var currentSeconds = Math.floor(this.core.totalTickTime / 1000.0);
        var lastSeconds = Math.floor(this.core.lastTickTime / 1000.0);
        if (currentSeconds > Stats_1.default.useTime) {
            this.core.isGameOver = true;
            Laya.Pool.clearBySign('bullet');
            // 判断是胜负，进相应的结束界面
            if (Stats_1.default.countEgg >= Stats_1.default.missionTarget) {
                Stats_1.default.isWin = true;
                if (Consts_1.Consts.MapLevel > Player_1.default.getInstance().curMissionNum) {
                    Stats_1.default.firstPass = true;
                    Player_1.default.getInstance().curMissionNum = Consts_1.Consts.MapLevel;
                }
                else
                    Stats_1.default.firstPass = false;
            }
            else
                Stats_1.default.isWin = false;
            if (Stats_1.default.countEgg > 0) {
                if (Player_1.default.getInstance().missionCurScoreDict[Consts_1.Consts.MapLevel] === undefined || Stats_1.default.countEgg > Player_1.default.getInstance().missionCurScoreDict[Consts_1.Consts.MapLevel]) {
                    Player_1.default.getInstance().updateMissionCurScoreDict(Consts_1.Consts.MapLevel, Stats_1.default.countEgg);
                    Stats_1.default.newRecord = true;
                }
            }
            var winRatio = 0, firstPassRatio = 0;
            if (Stats_1.default.isWin)
                winRatio = 1.0;
            else
                winRatio = 0.4;
            if (Stats_1.default.firstPass)
                firstPassRatio = 1.0;
            else
                firstPassRatio = 0.1;
            Stats_1.default.gainGold = Math.ceil(Stats_1.default.countEgg * winRatio + Consts_1.Consts.MissionGoldAward[Consts_1.Consts.MapLevel] * firstPassRatio);
            Stats_1.default.score = Math.ceil(Stats_1.default.gainGold) * 10;
            if (Stats_1.default.isWin)
                Laya.Scene.open('combat/StatsWin.scene');
            else
                Laya.Scene.open('combat/StatsLose.scene');
            // 存储本局数据
            Stats_1.default.updateDataStore();
            return;
        }
        if (currentSeconds != lastSeconds) {
            var hour = void 0, minute = void 0, second = void 0;
            _a = Utils_1.default.getFormatTimeBySeconds(Math.floor(Stats_1.default.useTime - currentSeconds)), hour = _a[0], minute = _a[1], second = _a[2];
            this.core.visual.statsTime.text = minute + ' : ' + second;
        }
    };
    MapSystem.prototype.updateEggState = function () {
        var _a, _b;
        var mapLevel = Consts_1.Consts.MapLevel;
        var leftEgg, outEggs, midEggs, rightEgg, leftEggImage, midEggsImage, rightEggImage;
        // 具体流程：1. 如果两边栏没有，则先填充右，再填充左；2. 否则，如果本地 <= 3 ，留在本地；3. 否则，如果大于3，则采用图层方式
        for (var _i = 0, _c = Consts_1.Consts.ActiveCoopLayer[mapLevel]; _i < _c.length; _i++) {
            var layer = _c[_i];
            midEggs = this.inEggDict[layer];
            outEggs = this.outEggDict[layer];
            _a = this.eggImage[layer], leftEggImage = _a[0], rightEggImage = _a[1], midEggsImage = _a[2];
            // 先更新外面的蛋的状态
            for (var i = 0; i < outEggs.length; i++) {
                var egg = outEggs[i];
                if (!egg) {
                    // 没有蛋则从窝里取蛋
                    if (midEggs.length > 0) {
                        outEggs[i] = midEggs[0];
                        midEggs.shift();
                    }
                }
            }
            leftEgg = outEggs[0], rightEgg = outEggs[1];
            if (!leftEgg == leftEggImage.visible) {
                this._setOutEggImageVisible(layer, leftEggImage, !!leftEgg);
            }
            if (!rightEgg == rightEggImage.visible) {
                this._setOutEggImageVisible(layer, rightEggImage, !!rightEgg);
            }
            // 再更新笼中蛋的状态
            var countEggGroup = void 0, resEggGroupURL = void 0, targetEggGroupURL = null;
            for (var i = Consts_1.Consts.ResEggGroupURL.length - 1; i >= 0; i--) {
                _b = Consts_1.Consts.ResEggGroupURL[i], countEggGroup = _b[0], resEggGroupURL = _b[1];
                if (midEggs.length >= countEggGroup) {
                    targetEggGroupURL = resEggGroupURL;
                    break;
                }
            }
            if (this.inEggTextureURL[layer] != targetEggGroupURL) {
                midEggsImage.texture = targetEggGroupURL;
                this.inEggTextureURL[layer] = targetEggGroupURL;
            }
        }
    };
    // 鸡蛋放进盒子
    MapSystem.prototype.putEggInBox = function (owner) {
        if (!owner.eggCarried)
            return;
        owner.eggCarried.pos(owner.x, owner.y);
        owner.eggCarried.visible = true;
        var scoreBox = this.core.visual.missionBox;
        var xTo = scoreBox.x;
        var yTo = scoreBox.y;
        var props = { x: xTo, y: yTo, complete: Laya.Handler.create(this, this._putEggInBoxCB, [owner]) };
        Laya.Tween.to(owner.eggCarried, props, 500);
    };
    // 鸡蛋放进盒子的动画回调
    MapSystem.prototype._putEggInBoxCB = function (owner) {
        if (!owner.eggCarried)
            return;
        this.core.unitSys.delUnit(owner.eggCarried.guid);
        owner.eggCarried = null;
        Stats_1.default.countEgg += 1;
    };
    MapSystem.prototype.checkEggOfCoop = function (layer, idx) {
        return this.outEggDict[String(layer)][idx];
    };
    MapSystem.prototype.takeEggOutOfCoop = function (owner, layer, idx) {
        owner.eggCarried = this.outEggDict[String(layer)][idx];
        this.outEggDict[String(layer)][idx] = null;
        this.eggImage[String(layer)][idx].visible = false;
    };
    MapSystem.prototype._setOutEggImageVisible = function (layer, eggImage, visible) {
        eggImage.visible = visible;
        if (visible) {
            // 蛋槽位外面的蛋显示
            var grass = Utils_1.default.getGrassByCoopLayer(this.core, layer);
            var xFrom = grass.x + grass.width / 2.0;
            var yFrom = grass.y + grass.height / 2.0;
            var props = { x: xFrom, y: yFrom };
            Laya.Tween.from(eggImage, props, 500);
        }
    };
    MapSystem.prototype._onAttackFox = function () {
        Stats_1.default.useTime += 1.0;
    };
    return MapSystem;
}(Laya.Script));
exports.default = MapSystem;
},{"../consts/Consts":22,"../consts/Player":23,"../consts/Stats":24,"../consts/Utils":25}],14:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var MoveSystem = /** @class */ (function () {
    function MoveSystem(core) {
        this._unitRecorder = {};
        this._moveInfo = [];
        this.core = core;
    }
    MoveSystem.prototype.update = function (deltaTick) {
        var guid, vdx, vdy, offset, dx, dy;
        for (var _i = 0, _a = this._moveInfo; _i < _a.length; _i++) {
            var element = _a[_i];
            guid = element[0], vdx = element[1], vdy = element[2];
            var unit = this.core.unitSys.findUnit(guid);
            if (!unit)
                continue;
            dx = vdx * unit.speed * deltaTick / 1000.0;
            dy = vdy * unit.speed * deltaTick / 1000.0;
            var rig = unit.getComponent(Laya.RigidBody);
            var collider = unit.getComponent(Laya.ColliderBase);
            if (dy != 0 && unit.contactCollider && rig.linearVelocity.y == 0) {
                if (dy < 0) {
                    rig.applyLinearImpulseToCenter({ x: 0, y: -15 });
                }
                else if (unit.contactCollider.owner.name != 'boundFloor') {
                    collider.isSensor = true;
                    unit.ignoreCollider = unit.contactCollider;
                    unit.contactCollider = null;
                }
            }
            if (dx != 0) {
                // 左墙和右墙的特殊判定
                if (unit.doContactWall) {
                    if (dx > 0 && unit.x > 500)
                        continue;
                    if (dx < 0 && unit.x < 500)
                        continue;
                }
                this._unitRecorder[guid] = true;
                rig.setVelocity({ x: dx * 2, y: rig.linearVelocity.y });
            }
        }
        for (var guidStr in this.core.unitSys.unitDict) {
            var guid_1 = Number(guidStr);
            if (this._unitRecorder[guid_1])
                continue;
            var unit = this.core.unitSys.findUnit(guid_1);
            if (!unit)
                continue;
            var rig = unit.getComponent(Laya.RigidBody);
            if (!rig)
                continue;
            unit.getComponent(Laya.RigidBody).setVelocity({ x: 0, y: rig.linearVelocity.y });
        }
        this._unitRecorder = {};
        this._moveInfo = [];
    };
    Object.defineProperty(MoveSystem.prototype, "moveInfo", {
        get: function () { return this._moveInfo; },
        set: function (moveInfo) { this._moveInfo = moveInfo; },
        enumerable: true,
        configurable: true
    });
    return MoveSystem;
}());
exports.default = MoveSystem;
},{}],15:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var PathFindingSystem = /** @class */ (function () {
    function PathFindingSystem(core) {
        this._pfDict = {};
        this.core = core;
    }
    PathFindingSystem.prototype.update = function () {
    };
    PathFindingSystem.prototype.moveTo = function (owner, x, y) {
        var vdx = 0, vdy = 0;
        var deltaX = x - owner.x;
        var deltaY = y - owner.y;
        if (deltaY > 50) {
            vdy = 1;
        }
        else if (deltaY < -50) {
            vdy = -1;
        }
        if (deltaX > 2) {
            vdx = 1;
        }
        else if (deltaX < -2) {
            vdx = -1;
        }
        this.core.moveSys.moveInfo.push([owner.guid, vdx, vdy]);
    };
    return PathFindingSystem;
}());
exports.default = PathFindingSystem;
},{}],16:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Consts_1 = require("../consts/Consts");
var SpellSystem = /** @class */ (function () {
    function SpellSystem(core) {
        this._spellGuidCount = 1;
        this._spellDict = {};
        this.core = core;
    }
    SpellSystem.prototype.castSpell = function (caster, SpellClass) {
        this._spellDict[this._spellGuidCount] = new SpellClass(this.core, caster, this._spellGuidCount);
        caster.curSpell = this._spellDict[this._spellGuidCount];
        this._spellGuidCount += 1;
    };
    SpellSystem.prototype.finishSpell = function (spellGuid) {
        if (this._spellDict[spellGuid]) {
            this._spellDict[spellGuid].caster.curSpell = null;
            delete this._spellDict[spellGuid];
        }
    };
    SpellSystem.prototype.breakSpell = function (unit) {
        if (unit.curSpell == null)
            return;
        unit.curSpell.spellClass.spellBreak(unit.curSpell);
        this.finishSpell(String(unit.curSpell.spellGuid));
    };
    SpellSystem.prototype.update = function (deltaTime) {
        this.updateSpell(deltaTime);
        this.updateAutoShoot();
    };
    SpellSystem.prototype.updateSpell = function (deltaTime) {
        var stageTime, stageSpell, nextStage;
        for (var spellGuid in this._spellDict) {
            var spell = this._spellDict[spellGuid];
            var stageInfo = spell.spellStageTimeDict[String(spell.spellStage)];
            if (stageInfo) {
                stageTime = stageInfo[0], stageSpell = stageInfo[1], nextStage = stageInfo[2];
                if (spell.pastTime < stageTime && spell.pastTime + deltaTime >= stageTime) {
                    spell.spellStage = nextStage;
                    stageSpell(spell);
                    if (spell.spellStage == Consts_1.SpellStage.END) {
                        this.finishSpell(spellGuid);
                    }
                }
            }
            spell.pastTime += deltaTime;
        }
    };
    SpellSystem.prototype.updateAutoShoot = function () {
        for (var guid in this.core.unitSys.heroDict) {
            var hero = this.core.unitSys.heroDict[guid];
            if (hero.handState != Consts_1.HandStates.GUN)
                continue;
            if (hero.moveState == Consts_1.MoveStates.JUMP_UP || hero.moveState == Consts_1.MoveStates.JUMP_DOWN)
                continue;
            if (this.core.totalTickTime - hero.lastShootTick < 1000.0 / hero.atkSpeed)
                continue;
            for (var foxGuid in this.core.unitSys.foxDict) {
                var fox = this.core.unitSys.foxDict[foxGuid];
                if (!fox.visible)
                    continue;
                if (hero.coopLayer != fox.coopLayer || hero.directionX * (fox.x - hero.x) <= 0)
                    continue;
                this.core.bulletSys.createBullet(hero.x + hero.directionX * hero.width / 2.0, hero.y + 10, hero.directionX * 10.0, 0);
                hero.lastShootTick = this.core.totalTickTime;
                hero.carriedNum -= 1.0 / Consts_1.Consts.ShootPerTurn;
            }
        }
    };
    return SpellSystem;
}());
exports.default = SpellSystem;
},{"../consts/Consts":22}],17:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../ui/layaMaxUI");
var MyUI = layaMaxUI_1.ui.combat.StatsLoseUI;
var Stats_1 = require("../consts/Stats");
var StatsLose = /** @class */ (function (_super) {
    __extends(StatsLose, _super);
    function StatsLose() {
        var _this = _super.call(this) || this;
        _this._displaySeqList = [];
        _this._displayContent = [];
        return _this;
    }
    Object.defineProperty(StatsLose.prototype, "displaySeqList", {
        get: function () { return this._displaySeqList; },
        set: function (seq) { this._displaySeqList = seq; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsLose.prototype, "displayContent", {
        get: function () { return this._displayContent; },
        set: function (content) { this._displayContent = content; },
        enumerable: true,
        configurable: true
    });
    StatsLose.prototype.onOpened = function () {
        this.btnReplay.on(Laya.Event.MOUSE_DOWN, this, this._btnReplayDown);
        this.btnReplay.on(Laya.Event.MOUSE_UP, this, this._btnReplayUp);
        this.btnMenu.on(Laya.Event.MOUSE_DOWN, this, this._btnMenuDown);
        this.btnMenu.on(Laya.Event.MOUSE_UP, this, this._btnMenuUp);
        Laya.stage.on(Laya.Event.MOUSE_UP, this, this._globalBtnUp);
        this.displaySeqList = [this.statsTotalLabel, this.statsTotal, this.statsEggLabel, this.statsEgg, this.statsGoldLabel, this.statsGold,
            this.statsHungryLabel, this.statsHungry, this.statsTimeLabel, this.statsTime, this.statsFoxLabel, this.statsFox,];
        this.displayContent = [Stats_1.default.score, Stats_1.default.countEgg, Stats_1.default.gainGold, Math.ceil(Stats_1.default.countHungry), Stats_1.default.useTime, Stats_1.default.countAttackFox,];
        for (var i = 0; i < this.displayContent.length; i++) {
            this.displaySeqList[i * 2 + 1].text = String(this.displayContent[i]);
        }
        this.displayScore(0);
    };
    StatsLose.prototype.displayScore = function (idx) {
        // 最后显示按钮
        var duration = 500;
        if (idx >= this.displaySeqList.length) {
            if (idx > this.displaySeqList.length)
                return;
            var props_1 = { alpha: 1.0, ease: Laya.Ease.linearOut, complete: Laya.Handler.create(this, undefined) };
            Laya.Tween.to(this.btnMenu, props_1, duration);
            Laya.Tween.to(this.btnReplay, props_1, duration);
            return;
        }
        // 其它正常
        var props = { alpha: 1.0, ease: Laya.Ease.linearOut, complete: Laya.Handler.create(this, this.displayScore, [idx + 1]) };
        Laya.Tween.to(this.displaySeqList[idx], props, duration);
        if (idx == 3 && Stats_1.default.newRecord) {
            props = { alpha: 1.0, ease: Laya.Ease.linearOut, complete: null };
            Laya.Tween.to(this.newRecord, props, duration);
        }
    };
    StatsLose.prototype._btnReplayDown = function () {
        this.btnReplay.skin = 'ui/BlueButtonPressed.png';
    };
    StatsLose.prototype._btnReplayUp = function () {
        this.btnReplay.skin = 'ui/BlueButton.png';
        Laya.Scene.open('combat/Combat.scene');
    };
    StatsLose.prototype._btnMenuDown = function () {
        this.btnMenu.skin = 'ui/GreenButtonPressed.png';
    };
    StatsLose.prototype._btnMenuUp = function () {
        this.btnMenu.skin = 'ui/GreenButton.png';
        Laya.Scene.open('menu/Menu.scene');
    };
    StatsLose.prototype._globalBtnUp = function () {
        this.btnReplay.skin = 'ui/BlueButton.png';
        this.btnMenu.skin = 'ui/GreenButton.png';
    };
    return StatsLose;
}(MyUI));
exports.default = StatsLose;
},{"../consts/Stats":24,"../ui/layaMaxUI":34}],18:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../ui/layaMaxUI");
var MyUI = layaMaxUI_1.ui.combat.StatsWinUI;
var Stats_1 = require("../consts/Stats");
var StatsWin = /** @class */ (function (_super) {
    __extends(StatsWin, _super);
    function StatsWin() {
        var _this = _super.call(this) || this;
        _this._displaySeqList = [];
        _this._displayContent = [];
        return _this;
    }
    Object.defineProperty(StatsWin.prototype, "displaySeqList", {
        get: function () { return this._displaySeqList; },
        set: function (seq) { this._displaySeqList = seq; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(StatsWin.prototype, "displayContent", {
        get: function () { return this._displayContent; },
        set: function (content) { this._displayContent = content; },
        enumerable: true,
        configurable: true
    });
    StatsWin.prototype.onOpened = function () {
        this.btnReplay.on(Laya.Event.MOUSE_DOWN, this, this._btnReplayDown);
        this.btnReplay.on(Laya.Event.MOUSE_UP, this, this._btnReplayUp);
        this.btnMenu.on(Laya.Event.MOUSE_DOWN, this, this._btnMenuDown);
        this.btnMenu.on(Laya.Event.MOUSE_UP, this, this._btnMenuUp);
        Laya.stage.on(Laya.Event.MOUSE_UP, this, this._globalBtnUp);
        this.displaySeqList = [this.statsTotalLabel, this.statsTotal, this.statsEggLabel, this.statsEgg, this.statsGoldLabel, this.statsGold,
            this.statsHungryLabel, this.statsHungry, this.statsTimeLabel, this.statsTime, this.statsFoxLabel, this.statsFox,];
        this.displayContent = [Stats_1.default.score, Stats_1.default.countEgg, Stats_1.default.gainGold, Math.ceil(Stats_1.default.countHungry), Stats_1.default.useTime, Stats_1.default.countAttackFox,];
        for (var i = 0; i < this.displayContent.length; i++) {
            this.displaySeqList[i * 2 + 1].text = String(this.displayContent[i]);
        }
        this.btnMenu.visible = this.btnReplay.visible = false;
        this.displayScore(0);
    };
    StatsWin.prototype.displayScore = function (idx) {
        // 最后显示按钮
        var duration = 500;
        if (idx >= this.displaySeqList.length) {
            if (idx > this.displaySeqList.length)
                return;
            this.btnMenu.visible = this.btnReplay.visible = true;
            var props_1 = { alpha: 1.0, ease: Laya.Ease.linearOut, complete: Laya.Handler.create(this, undefined) };
            Laya.Tween.to(this.btnMenu, props_1, duration);
            Laya.Tween.to(this.btnReplay, props_1, duration);
            return;
        }
        // 其它正常
        var props = { alpha: 1.0, ease: Laya.Ease.linearOut, complete: Laya.Handler.create(this, this.displayScore, [idx + 1]) };
        Laya.Tween.to(this.displaySeqList[idx], props, duration);
        if (idx == 3 && Stats_1.default.newRecord) {
            props = { alpha: 1.0, ease: Laya.Ease.linearOut, complete: null };
            Laya.Tween.to(this.newRecord, props, duration);
        }
        else if (idx == 5 && Stats_1.default.firstPass) {
            props = { alpha: 1.0, ease: Laya.Ease.linearOut, complete: null };
            Laya.Tween.to(this.firstPass, props, duration);
        }
    };
    StatsWin.prototype._btnReplayDown = function () {
        this.btnReplay.skin = 'ui/BlueButtonPressed.png';
    };
    StatsWin.prototype._btnReplayUp = function () {
        this.btnReplay.skin = 'ui/BlueButton.png';
        Laya.Scene.open('combat/Combat.scene');
    };
    StatsWin.prototype._btnMenuDown = function () {
        this.btnMenu.skin = 'ui/GreenButtonPressed.png';
    };
    StatsWin.prototype._btnMenuUp = function () {
        this.btnMenu.skin = 'ui/GreenButton.png';
        Laya.Scene.open('menu/Menu.scene');
    };
    StatsWin.prototype._globalBtnUp = function () {
        this.btnReplay.skin = 'ui/BlueButton.png';
        this.btnMenu.skin = 'ui/GreenButton.png';
    };
    return StatsWin;
}(MyUI));
exports.default = StatsWin;
},{"../consts/Stats":24,"../ui/layaMaxUI":34}],19:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Consts_1 = require("../consts/Consts");
var Unit = /** @class */ (function (_super) {
    __extends(Unit, _super);
    function Unit(core, unitType) {
        var _this = _super.call(this) || this;
        _this._contactCollider = null;
        _this._ignoreCollider = null;
        _this._doContactWall = false;
        _this._directionX = 1;
        _this._curSpell = null;
        // 母鸡 独有
        _this.healthRatio = 1.0; // 健康值
        _this.nextLayTick = 0.0; // 下一次孵蛋时间
        // 狐狸 独有
        _this.nextAttackTick = 0.0; // 下一次攻击时间
        _this.core = core;
        _this._type = unitType;
        _this._proto = Consts_1.UnitProto[Number(unitType)];
        Laya.loader.load(_this._proto[Consts_1.UnitProtoIdx.RES], Laya.Handler.create(_this, _this._onLoadedRes, null, false));
        return _this;
    }
    Unit.prototype.init = function () {
        // 碰撞初始化
        if (this.type == Consts_1.UnitType.FOX) {
            this._rig = this.addComponent(Laya.RigidBody);
            this._rig.allowRotation = false;
            this._rig.type = 'dynamic';
            this._rig.gravityScale = 0;
            this._rig.category = 2;
            this._rig.mask = 1;
            this._collider = this.addComponent(Laya.BoxCollider);
            this._collider.isSensor = true;
        }
        // 可视化初始化
        if (this.type == Consts_1.UnitType.FOX || this.type == Consts_1.UnitType.EGG) {
            this.visible = false;
        }
        else {
            this.moveState = Consts_1.MoveStates.IDLE;
        }
    };
    Object.defineProperty(Unit.prototype, "guid", {
        get: function () { return this._guid; },
        set: function (guid) { this._guid = guid; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Unit.prototype, "type", {
        get: function () { return this._type; },
        set: function (type) { this._type = type; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Unit.prototype, "speed", {
        get: function () { return this._speed; },
        set: function (speed) { this._speed = speed; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Unit.prototype, "anim", {
        get: function () { return this._anim; },
        set: function (anim) { this._anim = anim; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Unit.prototype, "moveState", {
        get: function () { return this._moveState; },
        set: function (moveState) {
            if (this._moveState != moveState) {
                this._moveState = moveState;
                this.updateAnim();
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Unit.prototype, "proto", {
        get: function () { return this._proto; },
        set: function (proto) { this._proto = proto; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Unit.prototype, "contactCollider", {
        get: function () { return this._contactCollider; },
        set: function (contactCollider) { this._contactCollider = contactCollider; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Unit.prototype, "ignoreCollider", {
        get: function () { return this._ignoreCollider; },
        set: function (ignoreCollider) { this._ignoreCollider = ignoreCollider; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Unit.prototype, "doContactWall", {
        get: function () { return this._doContactWall; },
        set: function (doContactWall) { this._doContactWall = doContactWall; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Unit.prototype, "directionX", {
        get: function () { return this._directionX; },
        set: function (directionX) { this._directionX = directionX; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Unit.prototype, "curSpell", {
        get: function () { return this._curSpell; },
        set: function (curSpell) { this._curSpell = curSpell; },
        enumerable: true,
        configurable: true
    });
    Unit.prototype.updateAnim = function () { this.anim.play(0, false, String(this.moveState)); };
    ;
    Unit.prototype.chickenLayEgg = function () {
        var egg = this.core.unitSys.createUnit(Consts_1.UnitType.EGG, this.x, this.y + 40);
        egg.coopLayer = this.coopLayer;
        // 逻辑流程，图层实现，实体隐藏，节省渲染，只有需要时再拿来使用
        this.core.mapSys.inEggDict[String(egg.coopLayer)].push(egg);
    };
    Unit.prototype.foxStealEgg = function () {
        console.log('Fox Steal Egg', this.guid);
        this.anim.play(0, false, Consts_1.MoveStates.FOX_RUN_AWAY);
    };
    Unit.prototype.onEnable = function () {
    };
    Unit.prototype.onDisable = function () {
    };
    Unit.prototype._onLoadedRes = function () {
        // 加载角色
        this._anim = new Laya.Animation();
        // 设置动画
        var animURL = this._proto[Consts_1.UnitProtoIdx.ANIM];
        this.anim.loadAnimation(animURL, Laya.Handler.create(this, this._onLoadedAnim, null, false));
    };
    Unit.prototype._onLoadedAnim = function () {
        this.addChild(this.anim);
        this.anim.pos(this.width / 2.0, this.height / 2.0);
        this.pivot(this.width / 2.0, this.height / 2.0);
        // 注册 LABEL 事件
        this.anim.on(Laya.Event.LABEL, this, this.core.aiSys.animLabelCB, [this]);
        // 初始化状态
        this.init();
    };
    return Unit;
}(Laya.Sprite));
exports.default = Unit;
},{"../consts/Consts":22}],20:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Consts_1 = require("../consts/Consts");
var Hero_1 = require("./Hero");
var Unit_1 = require("./Unit");
var Player_1 = require("../consts/Player");
var HeroAI_1 = require("./HeroAI");
var UnitSystem = /** @class */ (function () {
    function UnitSystem(core) {
        this._guidCount = 1;
        this._unitDict = {};
        this._unitTypeDict = {};
        this._heroCount = 0;
        this.core = core;
        var unitTypeList = [Consts_1.UnitType.HERO, Consts_1.UnitType.CHICKEN, Consts_1.UnitType.FOX, Consts_1.UnitType.EGG];
        for (var idx in unitTypeList) {
            this._unitTypeDict[unitTypeList[idx]] = {};
        }
    }
    UnitSystem.prototype.createUnit = function (unitType, x, y) {
        var unit;
        if (unitType === Consts_1.UnitType.HERO) {
            unit = new Hero_1.default(this.core);
            unit.speed = Player_1.default.getInstance().speed;
            this._player = unit;
        }
        else {
            unit = new Unit_1.default(this.core, unitType);
            unit.speed = 60;
        }
        this.core.visual.addChild(unit);
        unit.zOrder = unit.proto[Consts_1.UnitProtoIdx.ZORDER];
        unit.pos(x, y);
        var scale = unit.proto[Consts_1.UnitProtoIdx.SCALE];
        unit.scale(scale, scale);
        unit.guid = this._guidCount;
        this._guidCount += 1;
        this._unitDict[unit.guid] = unit;
        this._unitTypeDict[String(unit.type)][unit.guid] = unit;
        if (unitType === Consts_1.UnitType.HERO) {
            var hero = unit;
            hero.ai = new HeroAI_1.default(hero);
        }
        return unit;
    };
    Object.defineProperty(UnitSystem.prototype, "heroCount", {
        get: function () { return this._heroCount; },
        set: function (heroCount) { this._heroCount = heroCount; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnitSystem.prototype, "unitDict", {
        get: function () { return this._unitDict; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnitSystem.prototype, "heroDict", {
        get: function () { return this._unitTypeDict[Consts_1.UnitType.HERO]; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnitSystem.prototype, "foxDict", {
        get: function () { return this._unitTypeDict[Consts_1.UnitType.FOX]; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnitSystem.prototype, "chickenDict", {
        get: function () { return this._unitTypeDict[Consts_1.UnitType.CHICKEN]; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnitSystem.prototype, "eggDict", {
        get: function () { return this._unitTypeDict[Consts_1.UnitType.EGG]; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(UnitSystem.prototype, "player", {
        get: function () { return this._player; },
        enumerable: true,
        configurable: true
    });
    UnitSystem.prototype.findUnit = function (guid) {
        return this._unitDict[guid];
    };
    UnitSystem.prototype.delUnit = function (guid) {
        if (!this._unitDict[guid])
            return;
        var unit = this._unitDict[guid];
        if (this._unitTypeDict[String(unit.type)][guid])
            delete this._unitTypeDict[String(unit.type)][guid];
        this.core.visual.removeChild(unit);
        delete this._unitDict[guid];
    };
    return UnitSystem;
}());
exports.default = UnitSystem;
},{"../consts/Consts":22,"../consts/Player":23,"./Hero":9,"./HeroAI":10,"./Unit":19}],21:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../ui/layaMaxUI");
var MyUI = layaMaxUI_1.ui.combat.CombatUI;
var Consts_1 = require("../consts/Consts");
var Stats_1 = require("../consts/Stats");
var Utils_1 = require("../consts/Utils");
var Visual = /** @class */ (function (_super) {
    __extends(Visual, _super);
    function Visual() {
        return _super.call(this) || this;
    }
    Visual.prototype.onOpened = function (param) {
        // Debug
        // Laya.init(Laya.Browser.clientWidth, Laya.Browser.clientHeight);
        // Laya.Stat.show(0, Laya.Browser.clientHeight / 2.0);
        // Load resources
        this._initMissionInfo();
        Laya.loader.load(Consts_1.Consts.ResCombatUI, Laya.Handler.create(this, this._onLoaded));
    };
    Visual.prototype._initMissionInfo = function () {
        var _a;
        // 时间显示
        var hour, minute, second;
        _a = Utils_1.default.getFormatTimeBySeconds(Math.floor(Stats_1.default.useTime)), hour = _a[0], minute = _a[1], second = _a[2];
        this.statsTime.text = minute + ' : ' + second;
        // 目标设定
        Stats_1.default.missionTarget = Consts_1.Consts.MissionTotalCount[Consts_1.Consts.MapLevel];
        var readyList = [this.readyBox, this.readyText, this.readyTips];
        for (var i = 0; i < readyList.length; i++) {
            readyList[i].visible = true;
        }
    };
    Visual.prototype._onLoaded = function () {
        this.btnExit.on(Laya.Event.MOUSE_DOWN, this, this._btnExitDown);
        this.btnExit.on(Laya.Event.MOUSE_UP, this, this._btnExitUp);
        this.btnExit.on(Laya.Event.MOUSE_OUT, this, this._btnExitOut);
        // 场景物件光晕效果
        var glowFilter = new Laya.GlowFilter("#ffff00", 6, 0, 0);
        var compList = [this.missionBox, this.supplyFood, this.supplyGuns];
        for (var i = 0; i < compList.length; i++) {
            compList[i].filters = [glowFilter];
        }
        // 按键颜色效果
        var btnList = [this.missionPlus, this.missionMinus, this.supplyPlus, this.supplyMinus, this.gunPlus, this.gunMinus];
        for (var i = 0; i < btnList.length; i++) {
            var colorFilter = new Laya.ColorFilter([
                0, 0, 0, 0, 0,
                0, 1, 0, 0, 0,
                0, 0, 0, 0, 0,
                0, 0, 0, 1, 0 // A
            ]);
            btnList[i].filters = [colorFilter];
        }
    };
    Visual.prototype._btnExitDown = function () {
        this.btnExit.skin = 'ui/exitPressed.png';
    };
    Visual.prototype._btnExitUp = function () {
        this.btnExit.skin = 'ui/exit.png';
        Laya.Scene.open('mission/Mission.scene');
    };
    Visual.prototype._btnExitOut = function () {
        this.btnExit.skin = 'ui/exit.png';
    };
    return Visual;
}(MyUI));
exports.default = Visual;
},{"../consts/Consts":22,"../consts/Stats":24,"../consts/Utils":25,"../ui/layaMaxUI":34}],22:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var CoopLayer = /** @class */ (function () {
    function CoopLayer() {
    }
    CoopLayer.TOP = 1;
    CoopLayer.MID = 2;
    CoopLayer.BOT = 3;
    return CoopLayer;
}());
exports.CoopLayer = CoopLayer;
var Consts = /** @class */ (function () {
    function Consts() {
    }
    Consts.GrassUseTime = 45000;
    Consts.ResPlayerURL = [
        'player/Char_run_00001.png',
        'player/Char_run_00002.png',
        'player/Char_run_00003.png',
        'player/Char_run_00004.png',
        'player/Char_run_00005.png',
    ];
    Consts.AnimFileHero = 'anim/Hero.ani';
    Consts.ResChickenURL = [
        'chicken/Chicken_Idle.png',
        'chicken/Chicken_lay00.png',
        'chicken/Chicken_lay01.png',
        'chicken/Chicken_hungry_sick.png',
    ];
    Consts.ResEggGroupURL = [
        [1, 'chicken/Eggs_01.png'],
        [2, 'chicken/Eggs_02.png'],
        [3, 'chicken/Eggs_03.png'],
        [4, 'chicken/Eggs_04.png'],
        [7, 'chicken/Eggs_07.png'],
        [13, 'chicken/Eggs_13.png'],
        [20, 'chicken/Eggs_20.png'],
        [30, 'chicken/Eggs_30.png'],
        [40, 'chicken/Eggs_40.png'],
    ];
    Consts.AnimFileChicken = 'anim/Chicken.ani';
    Consts.ResFoxURL = [
        'fox/Fox.png',
    ];
    Consts.AnimFileFox = 'anim/Fox.ani';
    Consts.ResEggURL = [
        'egg/Egg.png',
    ];
    Consts.AnimFileEgg = 'anim/Egg.ani';
    Consts.ResBulletURL = [
        'player/Bullet.png',
    ];
    Consts.ResMenuUI = [
        'ui/BlueButtonPressed.png',
    ];
    Consts.ResCombatUI = [
        'ui/CloseButtonPressed.png'
    ];
    Consts.ResStatsUI = [
        'ui/BlueButtonPressed.png',
        'ui/GreenButtonPressed.png',
    ];
    Consts.ResSettingUI = [
        'ui/CloseButtonPressed.png',
        'ui/GreenButtonPressed.png'
    ];
    Consts.ResAchievementUI = [
        'ui/GreenButtonPressed.png'
    ];
    Consts.ItemPrice = {
        1: [50, 200, 1000],
        2: [50, 100, 200, 500, 1000],
    };
    Consts.MissionGoldAward = {
        1: 50,
        2: 60,
        3: 70,
        4: 80,
        5: 90,
        6: 100,
        7: 120,
        8: 150,
    };
    Consts.ItemResURL = { 1: 'ui/itemDocument.png', 2: 'ui/itemBoot.png' };
    Consts.MapLevel = 1;
    Consts.MissionTitle = { 1: '关卡 1', 2: '关卡 2', 3: '关卡 3', 4: '关卡 4', 5: '关卡 5', 6: '关卡 6', 7: '关卡 7', 8: '关卡 ∞' };
    Consts.ActiveCoopLayer = {
        1: [CoopLayer.TOP, CoopLayer.MID, CoopLayer.BOT],
        2: [CoopLayer.TOP, CoopLayer.MID, CoopLayer.BOT],
        3: [CoopLayer.TOP, CoopLayer.MID, CoopLayer.BOT],
        4: [CoopLayer.TOP, CoopLayer.MID, CoopLayer.BOT],
        5: [CoopLayer.TOP, CoopLayer.MID, CoopLayer.BOT],
        6: [CoopLayer.TOP, CoopLayer.MID, CoopLayer.BOT],
        7: [CoopLayer.TOP, CoopLayer.MID, CoopLayer.BOT],
        8: [CoopLayer.TOP, CoopLayer.MID, CoopLayer.BOT],
    };
    Consts.ChickenLayInterval = {
        1: 10 * 1000,
        2: 9 * 1000,
        3: 8 * 1000,
        4: 7 * 1000,
        5: 6 * 1000,
        6: 5 * 1000,
        7: 4 * 1000,
        8: 3 * 1000,
    };
    Consts.ChickenLayIntervalRange = {
        1: 7 * 1000,
        2: 6 * 1000,
        3: 6 * 1000,
        4: 5 * 1000,
        5: 4 * 1000,
        6: 4 * 1000,
        7: 3 * 1000,
        8: 2 * 1000,
    };
    Consts.FoxAttackInterval = {
        1: 120 * 1000,
        2: 12 * 1000,
        3: 10 * 1000,
        4: 9 * 1000,
        5: 8 * 1000,
        6: 7 * 1000,
        7: 6 * 1000,
        8: 5 * 1000,
    };
    Consts.FoxAttackIntervalRange = {
        1: 5 * 1000,
        2: 5 * 1000,
        3: 4 * 1000,
        4: 4 * 1000,
        5: 3 * 1000,
        6: 3 * 1000,
        7: 2 * 1000,
        8: 2 * 1000,
    };
    Consts.FoxAttackWait = {
        1: 5 * 1000,
        2: 4 * 1000,
        3: 4 * 1000,
        4: 3 * 1000,
        5: 3 * 1000,
        6: 3 * 1000,
        7: 3 * 1000,
        8: 2 * 1000,
    };
    Consts.MissionTotalCount = {
        1: 10,
        2: 15,
        3: 20,
        4: 25,
        5: 30,
        6: 40,
        7: 50,
        8: 60,
    };
    Consts.MissionTime = {
        1: 90,
        2: 90,
        3: 90,
        4: 90,
        5: 90,
        6: 90,
        7: 90,
        8: 90,
    };
    Consts.HeroBornPos = [[-300, -160], [300, -160], [-300, -30], [300, -30]];
    Consts.HeroName = ['Mikey', 'Don', 'Leo', 'Raph'];
    Consts.HeroColor = ['#EE7942', '#8968CD', '#3A5FCD', '#CD0000'];
    Consts.ShootPerTurn = 1;
    return Consts;
}());
exports.Consts = Consts;
var AIHeroTaskType;
(function (AIHeroTaskType) {
    AIHeroTaskType[AIHeroTaskType["FREE"] = 0] = "FREE";
    AIHeroTaskType[AIHeroTaskType["EGG"] = 1] = "EGG";
    AIHeroTaskType[AIHeroTaskType["FOOD"] = 2] = "FOOD";
    AIHeroTaskType[AIHeroTaskType["GUN"] = 3] = "GUN";
})(AIHeroTaskType || (AIHeroTaskType = {}));
exports.AIHeroTaskType = AIHeroTaskType;
;
var AIHeroTaskStage;
(function (AIHeroTaskStage) {
    AIHeroTaskStage[AIHeroTaskStage["READY"] = 0] = "READY";
    AIHeroTaskStage[AIHeroTaskStage["WORK"] = 1] = "WORK";
})(AIHeroTaskStage || (AIHeroTaskStage = {}));
exports.AIHeroTaskStage = AIHeroTaskStage;
;
var UnitType = /** @class */ (function () {
    function UnitType() {
    }
    UnitType.HERO = 1;
    UnitType.CHICKEN = 2;
    UnitType.FOX = 3;
    UnitType.EGG = 4;
    return UnitType;
}());
exports.UnitType = UnitType;
var SpellType = /** @class */ (function () {
    function SpellType() {
    }
    SpellType.ATK = 1;
    return SpellType;
}());
exports.SpellType = SpellType;
var SpellStage = /** @class */ (function () {
    function SpellStage() {
    }
    SpellStage.BEFORE = 0;
    SpellStage.START = 1;
    SpellStage.HIT = 2;
    SpellStage.END = 3;
    return SpellStage;
}());
exports.SpellStage = SpellStage;
var MoveStates = /** @class */ (function () {
    function MoveStates() {
    }
    MoveStates.IDLE = 'idle';
    MoveStates.RUN = 'run';
    MoveStates.JUMP_UP = 'up';
    MoveStates.JUMP_DOWN = 'down';
    MoveStates.CHICK_LAY = 'lay';
    MoveStates.CHECK_HUNGRY = 'hungry';
    MoveStates.FOX_ATK = 'idle';
    MoveStates.FOX_WAIT = 'wait';
    MoveStates.FOX_RUN_AWAY = 'runAway';
    return MoveStates;
}());
exports.MoveStates = MoveStates;
var HandStates = /** @class */ (function () {
    function HandStates() {
    }
    HandStates.HAND = 'Hand';
    HandStates.EGG = 'Egg';
    HandStates.GUN = 'Gun';
    HandStates.SHOVEL = 'Shovel';
    HandStates.FOOD = 'Food';
    return HandStates;
}());
exports.HandStates = HandStates;
var UnitProtoIdx = /** @class */ (function () {
    function UnitProtoIdx() {
    }
    UnitProtoIdx.RES = 0;
    UnitProtoIdx.ANIM = 1;
    UnitProtoIdx.ZORDER = 2;
    UnitProtoIdx.SCALE = 3;
    return UnitProtoIdx;
}());
exports.UnitProtoIdx = UnitProtoIdx;
// 资源URL，动作URL，层级Zorder，缩放Scale
var UnitProto = {
    1: [Consts.ResPlayerURL, Consts.AnimFileHero, 5, 0.35],
    2: [Consts.ResChickenURL, Consts.AnimFileChicken, 3, 0.5],
    3: [Consts.ResFoxURL, Consts.AnimFileFox, 1, 0.35],
    4: [Consts.ResEggURL, Consts.AnimFileEgg, 3.1, 0.55],
};
exports.UnitProto = UnitProto;
var MessageType = /** @class */ (function () {
    function MessageType() {
    }
    MessageType.FOOD_NEED_SHOVEL = 1;
    return MessageType;
}());
exports.MessageType = MessageType;
var MessageProto = {
    1: [1000, '缺少铲子'],
};
exports.MessageProto = MessageProto;
var EventType = /** @class */ (function () {
    function EventType() {
    }
    EventType.ATTACK_FOX = 'attack_fox';
    return EventType;
}());
exports.EventType = EventType;
},{}],23:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Consts_1 = require("./Consts");
var Player = /** @class */ (function () {
    function Player() {
        this._gold = 0;
        this._totalGold = 0;
        this._highestCountEgg = 0;
        this._highestUseTime = 0;
        this._highestScore = 0;
        this._totalAttackFox = 0;
        this._totalFood = 0;
        this._soundSwitch = true;
        this._musicSwitch = true;
        this._itemLvDict = { 1: 0, 2: 0 };
        this._missionCurScoreDict = {};
        this._curMissionNum = 0;
        this._rankScoreList = [2, 10, 30, 50, 70, 90];
        this._loadData();
    }
    Player.getInstance = function () {
        if (!this.instance) {
            this.instance = new Player();
        }
        return this.instance;
    };
    Object.defineProperty(Player.prototype, "gold", {
        get: function () { return this._gold; },
        set: function (gold) {
            this._gold = gold;
            this._storeData("BCCgold", gold);
        },
        enumerable: true,
        configurable: true
    });
    ;
    ;
    Object.defineProperty(Player.prototype, "totalGold", {
        get: function () { return this._totalGold; },
        set: function (totalGold) {
            this._totalGold = totalGold;
            this._storeData("BCCtotalGold", totalGold);
        },
        enumerable: true,
        configurable: true
    });
    ;
    ;
    Object.defineProperty(Player.prototype, "speedLv", {
        get: function () { return this.itemLvDict[2]; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(Player.prototype, "speed", {
        get: function () { return 80 + this.speedLv * 10; },
        enumerable: true,
        configurable: true
    });
    ;
    Object.defineProperty(Player.prototype, "highestCountEgg", {
        get: function () { return this._highestCountEgg; },
        set: function (highestCountEgg) {
            this._highestCountEgg = highestCountEgg;
            this._storeData("BCChighestCountEgg", highestCountEgg);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Player.prototype, "highestUseTime", {
        get: function () { return this._highestUseTime; },
        set: function (highestUseTime) {
            this._highestUseTime = highestUseTime;
            this._storeData("BCChighestUseTime", highestUseTime);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Player.prototype, "highestScore", {
        get: function () { return this._highestScore; },
        set: function (highestScore) {
            this._highestScore = highestScore;
            this._storeData("BCChighestScore", highestScore);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Player.prototype, "totalAttackFox", {
        get: function () { return this._totalAttackFox; },
        set: function (totalAttackFox) {
            this._totalAttackFox = totalAttackFox;
            this._storeData("BCCtotalAttackFox", totalAttackFox);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Player.prototype, "totalFood", {
        get: function () { return this._totalFood; },
        set: function (totalFood) {
            this._totalFood = totalFood;
            this._storeData("BCCtotalFood", totalFood);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Player.prototype, "soundSwitch", {
        get: function () { return this._soundSwitch; },
        set: function (val) {
            this._soundSwitch = val;
            laya.media.SoundManager.soundMuted = !this.soundSwitch;
            this._storeData("BCCsoundSwitch", val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Player.prototype, "musicSwitch", {
        get: function () { return this._musicSwitch; },
        set: function (val) {
            this._musicSwitch = val;
            laya.media.SoundManager.musicMuted = !this.musicSwitch;
            this._storeData("BCCmusicSwitch", val);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Player.prototype, "itemLvDict", {
        get: function () { return this._itemLvDict; },
        enumerable: true,
        configurable: true
    });
    Player.prototype.updateItemLvDict = function (idx, lv) {
        this._itemLvDict[idx] = lv;
        this._storeData("BCCitemLvDict", this._itemLvDict);
    };
    Object.defineProperty(Player.prototype, "missionCurScoreDict", {
        get: function () { return this._missionCurScoreDict; },
        enumerable: true,
        configurable: true
    });
    Player.prototype.updateMissionCurScoreDict = function (idx, curScore) {
        this._missionCurScoreDict[idx] = curScore;
        this._storeData("BCCmissionCurScoreDict", this._missionCurScoreDict);
    };
    Object.defineProperty(Player.prototype, "totalAllocateCount", {
        get: function () { return this._itemLvDict[1] + 1; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Player.prototype, "curMissionNum", {
        get: function () { return this._curMissionNum; },
        set: function (curMissionNum) {
            this._curMissionNum = curMissionNum;
            this._storeData("BCCcurMissionNum", this._curMissionNum);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Player.prototype, "rankScore", {
        get: function () {
            var maxEgg = 0, curMission = Player.getInstance().curMissionNum;
            if (Player.getInstance().missionCurScoreDict[curMission + 1]) {
                maxEgg = Player.getInstance().missionCurScoreDict[curMission + 1];
            }
            var score = 100;
            if (curMission < 8)
                score = 100 - (curMission * 9 + Math.min(maxEgg * 0.5 / Consts_1.Consts.MissionTotalCount[curMission + 1], 1) * 5);
            else
                score = 100 - (72 + Math.min(maxEgg * 0.5 / Consts_1.Consts.MissionTotalCount[curMission], 1.0) * 27);
            console.log('????????0', score, curMission, maxEgg, Consts_1.Consts.MissionTotalCount[curMission]);
            return Math.round(score);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Player.prototype, "rankTitle", {
        get: function () {
            var title = ['农场王', '农场宗师', '农场大师', '黄金农场主', '白银农场主', '青铜农场主', '萌新农场工'];
            return title[this._getRankIdx()];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Player.prototype, "rankColor", {
        get: function () {
            var color = ['#EE5C42', '#EE7942', '#5CACEE', '#FFEC8B', '#C1CDC1', '#CD9B1D', '#ffffff'];
            return color[this._getRankIdx()];
        },
        enumerable: true,
        configurable: true
    });
    Player.prototype._getRankIdx = function () {
        for (var i = 0; i < this._rankScoreList.length; i++) {
            if (this.rankScore <= this._rankScoreList[i]) {
                return i;
            }
        }
        return this._rankScoreList.length;
    };
    Player.prototype._storeData = function (name, val) {
        if (val == null || val == undefined || val == '')
            return;
        Laya.LocalStorage.setItem(name, JSON.stringify(val));
    };
    Player.prototype._loadData = function () {
        // Laya.LocalStorage.clear();
        var res;
        res = this._getData("BCCgold");
        if (res)
            this.gold = res;
        res = this._getData("BCCtotalGold");
        if (res)
            this.totalGold = res;
        res = this._getData("BCChighestCountEgg");
        if (res)
            this.highestCountEgg = res;
        res = this._getData("BCChighestUseTime");
        if (res)
            this.highestUseTime = res;
        res = this._getData("BCCtotalAttackFox");
        if (res)
            this.totalAttackFox = res;
        res = this._getData("BCCtotalFood");
        if (res)
            this.totalFood = res;
        res = this._getData("BCChighestScore");
        if (res)
            this.highestScore = res;
        res = this._getData("BCCsoundSwitch");
        if (res != null) {
            this.soundSwitch = res;
            laya.media.SoundManager.soundMuted = !this.soundSwitch;
        }
        res = this._getData("BCCmusicSwitch");
        if (res != null) {
            this.musicSwitch = res;
            laya.media.SoundManager.musicMuted = !this.musicSwitch;
        }
        res = this._getData("BCCitemLvDict");
        if (res)
            this._itemLvDict = res;
        res = this._getData("BCCmissionCurScoreDict");
        if (res)
            this._missionCurScoreDict = res;
        res = this._getData("BCCcurMissionNum");
        if (res)
            this.curMissionNum = res;
    };
    Player.prototype._getData = function (name) {
        var res = Laya.LocalStorage.getItem(name);
        if (res == null || res == undefined || res == '')
            return null;
        return JSON.parse(res);
    };
    return Player;
}());
exports.default = Player;
},{"./Consts":22}],24:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Consts_1 = require("./Consts");
var Player_1 = require("./Player");
var Stats = /** @class */ (function () {
    function Stats() {
    }
    Stats.initVariable = function (core) {
        Stats.core = core;
        Stats.useTime = Consts_1.Consts.MissionTime[Consts_1.Consts.MapLevel];
        ;
        Stats.countEgg = 0;
        Stats.countAttackFox = 0;
        Stats.countHungry = 0;
        Stats.missionTarget = Consts_1.Consts.MissionTotalCount[Consts_1.Consts.MapLevel];
        Stats.score = 0;
        Stats.isWin = false;
        Stats.totalAllocateCount = Player_1.default.getInstance().totalAllocateCount;
        Stats.firstPass = false;
        Stats.gainGold = 0;
        Stats.newRecord = false;
    };
    Stats.updateDataStore = function () {
        var player = Player_1.default.getInstance();
        if (Stats.score > player.highestScore)
            player.highestScore = Stats.score;
        if (Stats.countEgg > player.highestCountEgg)
            player.highestCountEgg = Stats.countEgg;
        if (Stats.useTime > player.highestUseTime)
            player.highestUseTime = Stats.useTime;
        player.totalAttackFox += Stats.countAttackFox;
        player.totalFood += Stats.countHungry;
    };
    Object.defineProperty(Stats, "countEgg", {
        get: function () { return Stats._countEgg; },
        set: function (countEgg) {
            Stats._countEgg = countEgg;
            Stats.core.visual.statsBox.text = String(countEgg);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Stats, "useTime", {
        get: function () { return Stats._useTime; },
        set: function (useTime) { Stats._useTime = useTime; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Stats, "countAttackFox", {
        get: function () { return Stats._countAttackFox; },
        set: function (countAttackFox) { Stats._countAttackFox = countAttackFox; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Stats, "countHungry", {
        get: function () { return Stats._countHungry; },
        set: function (countHungry) { Stats._countHungry = countHungry; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Stats, "missionTarget", {
        get: function () { return Stats._missionTarget; },
        set: function (missionTarget) {
            Stats._missionTarget = missionTarget;
            Stats.core.visual.mission.text = String(Stats.missionTarget);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Stats, "score", {
        get: function () { return Stats._score; },
        set: function (score) { Stats._score = score; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Stats, "isWin", {
        get: function () { return Stats._isWin; },
        set: function (isWin) {
            Stats._isWin = isWin;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Stats, "totalAllocateCount", {
        get: function () { return Stats._totalAllocateCount; },
        set: function (totalAllocateCount) {
            Stats._totalAllocateCount = totalAllocateCount;
            Stats.core.visual.totalAllocate.text = String(Stats.totalAllocateCount);
            Stats.core.visual.toAllocate.text = String(Stats.totalAllocateCount);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Stats, "firstPass", {
        get: function () { return Stats._firstPass; },
        set: function (firstPass) { Stats._firstPass = firstPass; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Stats, "gainGold", {
        get: function () { return this._gainGold; },
        set: function (gainGold) {
            Stats._gainGold = gainGold;
            Player_1.default.getInstance().totalGold += gainGold;
            Player_1.default.getInstance().gold += gainGold;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Stats, "newRecord", {
        get: function () { return this._newRecord; },
        set: function (newRecord) { this._newRecord = newRecord; },
        enumerable: true,
        configurable: true
    });
    return Stats;
}());
exports.default = Stats;
},{"./Consts":22,"./Player":23}],25:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Consts_1 = require("../consts/Consts");
var Utils = /** @class */ (function (_super) {
    __extends(Utils, _super);
    function Utils() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Utils.getFormatTimeBySeconds = function (s) {
        var hours = Math.round((s - 30 * 60) / (60 * 60));
        var minutes = Math.round((s - 30) / 60) % 60;
        var seconds = s % 60;
        return [Utils.prefixInteger(hours), Utils.prefixInteger(minutes), Utils.prefixInteger(seconds)];
    };
    Utils.prefixInteger = function (num, len) {
        if (len === void 0) { len = 2; }
        return (Array(len).join('0') + num).slice(-len);
    };
    Utils.notifyTips = function (content) {
        var text = Laya.Pool.getItemByCreateFun('notifyTips', Utils.createText, Utils);
        text.fontSize = 55;
        text.color = '#f46128';
        text.bold = true;
        text.font = 'Microsoft YaHei';
        text.text = content;
        text.align = 'center';
        text.pos(Laya.stage.width / 2.0, Laya.stage.height / 2.0);
        var props = { x: text.x, y: text.y - 50, ease: Laya.Ease.linearOut, complete: Laya.Handler.create(this, this._notifyTipsCB, [text]) };
        Laya.Tween.to(text, props, 1000);
    };
    Utils._notifyTipsCB = function (text) {
        Laya.Pool.recover('notifyTips', text);
    };
    Utils.calDist = function (x1, y1, x2, y2) {
        return Math.sqrt(Math.pow(x1 - x2, 2) + Math.pow(y1 - y2, 2));
    };
    Utils.createText = function () {
        var text = new Laya.Text();
        text.fontSize = 55;
        text.color = '#f46128';
        text.bold = true;
        text.font = 'Microsoft YaHei';
        // text.stroke = 10;
        // text.strokeColor = '#363434';
        return text;
    };
    Utils.getGrassByCoopLayer = function (core, coopLayer) {
        // 蛋槽位外面的蛋显示
        var grass;
        if (coopLayer == Consts_1.CoopLayer.TOP) {
            grass = core.visual.topGrass;
        }
        else if (coopLayer == Consts_1.CoopLayer.MID) {
            grass = core.visual.midGrass;
        }
        else {
            grass = core.visual.botGrass;
        }
        return grass;
    };
    Utils.getChickenByCoopLayer = function (core, coopLayer) {
        var coopLayerToChickenDict = {};
        for (var guid in core.unitSys.chickenDict) {
            var chicken = core.unitSys.chickenDict[guid];
            if (chicken.coopLayer == coopLayer) {
                return chicken;
            }
        }
        return null;
    };
    Utils.addTouchEvent = function (heroSprite) {
        heroSprite.on(Laya.Event.MOUSE_DOWN, this, Utils._heroTouchDown, [heroSprite]);
    };
    Utils._heroTouchDown = function (heroSprite) {
        console.log('XXXXXX', heroSprite);
    };
    Utils.notifyMessageTimeDict = {};
    return Utils;
}(Laya.Script));
exports.default = Utils;
},{"../consts/Consts":22}],26:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../ui/layaMaxUI");
var MyUI = layaMaxUI_1.ui.menu.AchieveUI;
var Consts_1 = require("../consts/Consts");
var Player_1 = require("../consts/Player");
var Achievement = /** @class */ (function (_super) {
    __extends(Achievement, _super);
    function Achievement() {
        return _super.call(this) || this;
    }
    Achievement.prototype.onOpened = function (param) {
        Laya.loader.load(Consts_1.Consts.ResAchievementUI, Laya.Handler.create(this, this._onLoaded));
        // 更新数据
        this.statsScore.text = String(Player_1.default.getInstance().highestScore);
        this.statsEgg.text = String(Player_1.default.getInstance().highestCountEgg);
        this.statsTime.text = String(Player_1.default.getInstance().highestUseTime);
        this.statsGold.text = String(Player_1.default.getInstance().totalGold);
        this.statsAttackFox.text = String(Player_1.default.getInstance().totalAttackFox);
        this.statsFood.text = String(Math.ceil(Player_1.default.getInstance().totalFood));
    };
    Achievement.prototype._onLoaded = function () {
        this.btnSure.on(Laya.Event.MOUSE_DOWN, this, this._btnSureDown);
        this.btnSure.on(Laya.Event.MOUSE_UP, this, this._btnSureUp);
        Laya.stage.on(Laya.Event.MOUSE_UP, this, this._globalBtnUp);
    };
    Achievement.prototype._btnSureDown = function () {
        this.btnSure.skin = 'ui/GreenButtonPressed.png';
    };
    Achievement.prototype._btnSureUp = function () {
        this.btnSure.skin = 'ui/GreenButton.png';
        Laya.Scene.close('menu/Achieve.scene');
    };
    Achievement.prototype._globalBtnUp = function () {
        this.btnSure.skin = 'ui/GreenButton.png';
    };
    return Achievement;
}(MyUI));
exports.default = Achievement;
},{"../consts/Consts":22,"../consts/Player":23,"../ui/layaMaxUI":34}],27:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../ui/layaMaxUI");
var MyUI = layaMaxUI_1.ui.menu.MenuUI;
var Consts_1 = require("../consts/Consts");
var Player_1 = require("../consts/Player");
var Menu = /** @class */ (function (_super) {
    __extends(Menu, _super);
    function Menu() {
        var _this = _super.call(this) || this;
        _this.WIDTH = 1334;
        _this._bgList = {};
        _this._touchableDict = {};
        Laya.loader.load(Consts_1.Consts.ResMenuUI, Laya.Handler.create(_this, _this._onLoaded));
        return _this;
    }
    Object.defineProperty(Menu.prototype, "touchableDict", {
        get: function () { return this._touchableDict; },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Menu.prototype, "bgList", {
        get: function () { return this._bgList; },
        set: function (bgList) { this._bgList = bgList; },
        enumerable: true,
        configurable: true
    });
    Menu.prototype.onEnable = function () {
        this.btnMain.skin = 'ui/BlueButton.png';
        // 播放音乐
        laya.media.SoundManager.playMusic('custom/hall_bg.mp3');
    };
    Menu.prototype._onLoaded = function () {
        this.rankTitle.text = Player_1.default.getInstance().rankTitle;
        this.rankTitle.color = Player_1.default.getInstance().rankColor;
        // 开始按钮
        this.btnMain.on(Laya.Event.MOUSE_DOWN, this, this._btnMainDown);
        this.btnMain.on(Laya.Event.MOUSE_UP, this, this._btnMainUp);
        this.btnMain.on(Laya.Event.MOUSE_OUT, this, this._btnMainOut);
        var btnList = [this.btnShop, this.btnSetting, this.btnAchievement, this.btnRank];
        for (var i = 0; i < btnList.length; i++) {
            btnList[i].on(Laya.Event.MOUSE_DOWN, this, this._btnCommonDown, [btnList[i], i]);
            btnList[i].on(Laya.Event.MOUSE_UP, this, this._btnCommonUp, [btnList[i], i]);
            btnList[i].on(Laya.Event.MOUSE_OUT, this, this._btnCommonOut, [btnList[i], i]);
        }
        // 背景移动
        this.bgList = [
            [0, this.cloud12, this.cloud22, 0.6],
            [0, this.cloud11, this.cloud21, 1],
            [0, this.r13, this.r23, 2],
            [0, this.r12, this.r22, 3],
            [0, this.r11, this.r21, 4],
            [0, this.grass1, this.grass2, 5],
            [0, this.floor1, this.floor2, 6],
        ];
        Laya.timer.frameLoop(1, this, this._onBgLoop);
        // 触屏互动时间
        var heroList = [this.hero, this.egg];
        for (var i = 0; i < heroList.length; i++) {
            var heroSprite = heroList[i];
            heroSprite.on(Laya.Event.CLICK, this, this._btnHeroDown, [heroSprite, i]);
        }
    };
    Menu.prototype._btnHeroDown = function (heroSprite, idx) {
        var anim = heroSprite.getChildByName('anim');
        if (this.touchableDict[idx] !== undefined && this.touchableDict[idx] !== true)
            return;
        this.touchableDict[idx] = false;
        var props = { x: anim.x, y: anim.y - 60, complete: Laya.Handler.create(this, this._heroTop, [heroSprite, idx, [anim.x, anim.y]]) };
        Laya.Tween.to(anim, props, 500, Laya.Ease.quintOut);
    };
    Menu.prototype._heroTop = function (heroSprite, idx, oriPos) {
        var anim = heroSprite.getChildByName('anim');
        var props = { x: oriPos[0], y: oriPos[1], complete: Laya.Handler.create(this, this._heroDown, [heroSprite, idx]) };
        Laya.Tween.to(anim, props, 500, Laya.Ease.quintIn);
    };
    Menu.prototype._heroDown = function (heroSprite, idx) {
        var anim = heroSprite.getChildByName('anim');
        this.touchableDict[idx] = true;
    };
    Menu.prototype._btnMainDown = function () {
        this.btnMain.skin = 'ui/BlueButtonPressed.png';
    };
    Menu.prototype._btnMainUp = function () {
        this.btnMain.skin = 'ui/BlueButton.png';
        Laya.Scene.open('mission/Mission.scene');
    };
    Menu.prototype._btnMainOut = function () {
        this.btnMain.skin = 'ui/BlueButton.png';
    };
    Menu.prototype._btnCommonDown = function (btn, i) {
        btn.scale(1.2, 1.2);
    };
    Menu.prototype._btnCommonUp = function (btn, i) {
        btn.scale(1.0, 1.0);
        if (i === 0)
            Laya.Scene.open('shop/Shop.scene', false);
        else if (i === 1)
            Laya.Scene.open('menu/Setting.scene', false);
        else if (i === 2)
            Laya.Scene.open('menu/Achieve.scene', false);
        else if (i === 3)
            Laya.Scene.open('menu/Rank.scene', false);
    };
    Menu.prototype._btnCommonOut = function (btn, i) {
        btn.scale(1.0, 1.0);
    };
    Menu.prototype._onBgLoop = function () {
        var _a;
        var curX, bg1, bg2, intervalX;
        for (var idx in this.bgList) {
            _a = this.bgList[idx], curX = _a[0], bg1 = _a[1], bg2 = _a[2], intervalX = _a[3];
            curX = (curX + intervalX) % this.WIDTH;
            bg1.x = -curX;
            bg2.x = this.WIDTH - curX;
            this.bgList[idx][0] = curX;
        }
    };
    return Menu;
}(MyUI));
exports.default = Menu;
},{"../consts/Consts":22,"../consts/Player":23,"../ui/layaMaxUI":34}],28:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../ui/layaMaxUI");
var MyUI = layaMaxUI_1.ui.menu.RankUI;
var Player_1 = require("../consts/Player");
var Rank = /** @class */ (function (_super) {
    __extends(Rank, _super);
    function Rank() {
        return _super.call(this) || this;
    }
    Rank.prototype.onOpened = function (param) {
        // 更新数据
        this.rankScore.text = String(Player_1.default.getInstance().rankScore) + '%';
        this.rankTitle.text = Player_1.default.getInstance().rankTitle;
        this.rankTitle.color = Player_1.default.getInstance().rankColor;
        this.btnSure.on(Laya.Event.MOUSE_DOWN, this, this._btnSureDown);
        this.btnSure.on(Laya.Event.MOUSE_UP, this, this._btnSureUp);
        Laya.stage.on(Laya.Event.MOUSE_UP, this, this._globalBtnUp);
    };
    Rank.prototype._btnSureDown = function () {
        this.btnSure.skin = 'ui/GreenButtonPressed.png';
    };
    Rank.prototype._btnSureUp = function () {
        this.btnSure.skin = 'ui/GreenButton.png';
        Laya.Scene.close('menu/Rank.scene');
    };
    Rank.prototype._globalBtnUp = function () {
        this.btnSure.skin = 'ui/GreenButton.png';
    };
    return Rank;
}(MyUI));
exports.default = Rank;
},{"../consts/Player":23,"../ui/layaMaxUI":34}],29:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../ui/layaMaxUI");
var MyUI = layaMaxUI_1.ui.menu.SettingUI;
var Consts_1 = require("../consts/Consts");
var Player_1 = require("../consts/Player");
var Setting = /** @class */ (function (_super) {
    __extends(Setting, _super);
    function Setting() {
        return _super.call(this) || this;
    }
    Setting.prototype.onOpened = function (param) {
        Laya.loader.load(Consts_1.Consts.ResSettingUI, Laya.Handler.create(this, this._onLoaded));
    };
    Setting.prototype._onLoaded = function () {
        this.btnExit.on(Laya.Event.MOUSE_DOWN, this, this._btnExitDown);
        this.btnExit.on(Laya.Event.MOUSE_UP, this, this._btnExitUp);
        this.btnSure.on(Laya.Event.MOUSE_DOWN, this, this._btnSureDown);
        this.btnSure.on(Laya.Event.MOUSE_UP, this, this._btnSureUp);
        this.volumeBar.on(Laya.Event.MOUSE_MOVE, this, this._adjustVolume);
        this.switch1.on(Laya.Event.MOUSE_DOWN, this, this._soundMute);
        this.switch2.on(Laya.Event.MOUSE_DOWN, this, this._musicMute);
        Laya.stage.on(Laya.Event.MOUSE_UP, this, this._globalBtnUp);
        // 初始化音量按钮位置
        this.volume.pos(laya.media.SoundManager.musicVolume * 260 + 40, this.volume.y);
    };
    Setting.prototype._btnExitDown = function () {
        this.btnExit.skin = 'ui/CloseButtonPressed.png';
    };
    Setting.prototype._btnExitUp = function () {
        this.btnExit.skin = 'ui/CloseButton.png';
        Laya.Scene.close('menu/Setting.scene');
    };
    Setting.prototype._btnSureDown = function () {
        this.btnSure.skin = 'ui/GreenButtonPressed.png';
    };
    Setting.prototype._btnSureUp = function () {
        this.btnSure.skin = 'ui/GreenButton.png';
        Laya.Scene.close('menu/Setting.scene');
    };
    Setting.prototype._globalBtnUp = function () {
        this.btnExit.skin = 'ui/CloseButton.png';
        this.btnSure.skin = 'ui/GreenButton.png';
    };
    Setting.prototype._adjustVolume = function (e) {
        var newX = Math.max(Math.min(e.stageX - this.volumeBar.x, 300), 40);
        this.volume.pos(newX, this.volume.y);
        var volumeRatio = (newX - 40) / 260.0;
        laya.media.SoundManager.setSoundVolume(volumeRatio);
        laya.media.SoundManager.setMusicVolume(volumeRatio);
    };
    Setting.prototype._soundMute = function () {
        Player_1.default.getInstance().soundSwitch = !Player_1.default.getInstance().soundSwitch;
        if (Player_1.default.getInstance().soundSwitch) {
            var props = { x: this.switch1.x - 60, y: this.switch2.y, ease: Laya.Ease.linearOut, complete: null };
            Laya.Tween.to(this.switch1, props, 500);
            this.soundOn.color = '#ffffff';
            this.soundOff.color = '#4e4c4c';
        }
        else {
            var props = { x: this.switch1.x + 60, y: this.switch2.y, ease: Laya.Ease.linearOut, complete: null };
            Laya.Tween.to(this.switch1, props, 500);
            this.soundOn.color = '#4e4c4c';
            this.soundOff.color = '#ffffff';
        }
    };
    Setting.prototype._musicMute = function () {
        Player_1.default.getInstance().musicSwitch = !Player_1.default.getInstance().musicSwitch;
        if (Player_1.default.getInstance().musicSwitch) {
            laya.media.SoundManager.playMusic('custom/hall_bg.mp3');
            var props = { x: this.switch2.x - 60, y: this.switch2.y, ease: Laya.Ease.linearOut, complete: null };
            Laya.Tween.to(this.switch2, props, 500);
            this.musicOn.color = '#ffffff';
            this.musicOff.color = '#4e4c4c';
        }
        else {
            var props = { x: this.switch2.x + 60, y: this.switch2.y, ease: Laya.Ease.linearOut, complete: null };
            Laya.Tween.to(this.switch2, props, 500);
            this.musicOn.color = '#4e4c4c';
            this.musicOff.color = '#ffffff';
        }
    };
    return Setting;
}(MyUI));
exports.default = Setting;
},{"../consts/Consts":22,"../consts/Player":23,"../ui/layaMaxUI":34}],30:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../ui/layaMaxUI");
var MyUI = layaMaxUI_1.ui.mission.MissionUI;
var Consts_1 = require("../consts/Consts");
var Player_1 = require("../consts/Player");
var Mission = /** @class */ (function (_super) {
    __extends(Mission, _super);
    function Mission() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._WIDTH = 1334;
        _this._touchableDict = {};
        return _this;
    }
    Object.defineProperty(Mission.prototype, "touchableDict", {
        get: function () { return this._touchableDict; },
        enumerable: true,
        configurable: true
    });
    Mission.prototype.onOpened = function (param) {
        this.rankTitle.text = Player_1.default.getInstance().rankTitle;
        this.rankTitle.color = Player_1.default.getInstance().rankColor;
        for (var i = 0; i < 8; i++) {
            var btnVar = 'mission' + String(i + 1);
            var btn = this[btnVar];
            var btnTitle = btn.getChildByName('title');
            btnTitle.text = Consts_1.Consts.MissionTitle[i + 1];
            btn.on(Laya.Event.MOUSE_DOWN, this, this._btnDown, [btn, i]);
            btn.on(Laya.Event.MOUSE_UP, this, this._btnUp, [btn, i]);
            btn.on(Laya.Event.MOUSE_OUT, this, this._btnOut, [btn, i]);
            if (i + 1 in Consts_1.Consts.MissionTotalCount) {
                var missionGoalScore = btn.getChildByName('totalScore');
                missionGoalScore.text = String(Consts_1.Consts.MissionTotalCount[i + 1]);
            }
            if (i + 1 in Player_1.default.getInstance().missionCurScoreDict) {
                var missionCurScore = btn.getChildByName('curScore');
                missionCurScore.text = String(Player_1.default.getInstance().missionCurScoreDict[i + 1]);
            }
        }
        this._bgList = [
            [0, this.cloud12, this.cloud22, 0.6],
            [0, this.cloud11, this.cloud21, 1],
            [0, this.r13, this.r23, 2],
            [0, this.r12, this.r22, 3],
            [0, this.r11, this.r21, 4],
            [0, this.grass1, this.grass2, 5],
            [0, this.floor1, this.floor2, 6],
        ];
        Laya.timer.frameLoop(1, this, this._onBgLoop);
        this.btnExit.on(Laya.Event.MOUSE_DOWN, this, this._btnExitDown);
        this.btnExit.on(Laya.Event.MOUSE_UP, this, this._btnExitUp);
        this.btnExit.on(Laya.Event.MOUSE_OUT, this, this._btnExitOut);
        // 其他
        var btnList = [this.btnShop, this.btnSetting, this.btnAchievement, this.btnRank];
        for (var i = 0; i < btnList.length; i++) {
            btnList[i].on(Laya.Event.MOUSE_DOWN, this, this._btnCommonDown, [btnList[i], i]);
            btnList[i].on(Laya.Event.MOUSE_UP, this, this._btnCommonUp, [btnList[i], i]);
            btnList[i].on(Laya.Event.MOUSE_OUT, this, this._btnCommonOut, [btnList[i], i]);
        }
        // 刷新
        this._freshMissionBtnState();
        // 触屏互动时间
        var heroList = [this.hero1, this.hero2, this.hero3];
        for (var i = 0; i < heroList.length; i++) {
            var heroSprite = heroList[i];
            heroSprite.on(Laya.Event.CLICK, this, this._btnHeroDown, [heroSprite, i]);
        }
    };
    Mission.prototype._btnHeroDown = function (heroSprite, idx) {
        var anim = heroSprite.getChildByName('anim');
        if (this.touchableDict[idx] !== undefined && this.touchableDict[idx] !== true)
            return;
        this.touchableDict[idx] = false;
        var props = { x: anim.x, y: anim.y - 60, complete: Laya.Handler.create(this, this._heroTop, [heroSprite, idx, [anim.x, anim.y]]) };
        Laya.Tween.to(anim, props, 500, Laya.Ease.quintOut);
    };
    Mission.prototype._heroTop = function (heroSprite, idx, oriPos) {
        var anim = heroSprite.getChildByName('anim');
        var props = { x: oriPos[0], y: oriPos[1], complete: Laya.Handler.create(this, this._heroDown, [heroSprite, idx]) };
        Laya.Tween.to(anim, props, 500, Laya.Ease.quintIn);
    };
    Mission.prototype._heroDown = function (heroSprite, idx) {
        var anim = heroSprite.getChildByName('anim');
        this.touchableDict[idx] = true;
    };
    Mission.prototype._btnDown = function (btn, idx) {
        btn.scale(1.1, 1.1);
    };
    Mission.prototype._btnUp = function (btn, idx) {
        btn.scale(1.0, 1.0);
        Consts_1.Consts.MapLevel = idx + 1;
        Laya.Scene.open('combat/Combat.scene', true, [idx + 1]);
    };
    Mission.prototype._btnOut = function (btn, idx) {
        btn.scale(1.0, 1.0);
    };
    Mission.prototype._btnCommonDown = function (btn, i) {
        btn.scale(1.2, 1.2);
    };
    Mission.prototype._btnCommonUp = function (btn, i) {
        btn.scale(1.0, 1.0);
        if (i === 0)
            Laya.Scene.open('shop/Shop.scene', false);
        else if (i === 1)
            Laya.Scene.open('menu/Setting.scene', false);
        else if (i === 2)
            Laya.Scene.open('menu/Achieve.scene', false);
        else if (i === 3)
            Laya.Scene.open('menu/Rank.scene', false);
    };
    Mission.prototype._btnCommonOut = function (btn, i) {
        btn.scale(1.0, 1.0);
    };
    Mission.prototype._onBgLoop = function () {
        var _a;
        var curX, bg1, bg2, intervalX;
        for (var idx in this._bgList) {
            _a = this._bgList[idx], curX = _a[0], bg1 = _a[1], bg2 = _a[2], intervalX = _a[3];
            curX = (curX + intervalX) % this._WIDTH;
            bg1.x = -curX;
            bg2.x = this._WIDTH - curX;
            this._bgList[idx][0] = curX;
        }
    };
    Mission.prototype._btnExitDown = function () {
        this.btnExit.skin = 'ui/exitPressed.png';
    };
    Mission.prototype._btnExitUp = function () {
        this.btnExit.skin = 'ui/exit.png';
        Laya.Scene.open('menu/Menu.scene');
    };
    Mission.prototype._btnExitOut = function () {
        this.btnExit.skin = 'ui/exit.png';
    };
    Mission.prototype._freshMissionBtnState = function () {
        for (var i = 0; i < 8; i++) {
            var btnVar = 'mission' + String(i + 1);
            var btn = this[btnVar];
            btn.disabled = i > Player_1.default.getInstance().curMissionNum;
        }
    };
    return Mission;
}(MyUI));
exports.default = Mission;
},{"../consts/Consts":22,"../consts/Player":23,"../ui/layaMaxUI":34}],31:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var layaMaxUI_1 = require("../ui/layaMaxUI");
var MyUI = layaMaxUI_1.ui.shop.ShopUI;
var Consts_1 = require("../consts/Consts");
var Player_1 = require("../consts/Player");
var Shop = /** @class */ (function (_super) {
    __extends(Shop, _super);
    function Shop() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this._itemArray = [];
        return _this;
    }
    Shop.prototype.onOpened = function (param) {
        // 加载商店物品
        for (var i = 1; i <= 2; i++) {
            var item = this.getChildByName('item' + String(i));
            if (!item)
                break;
            this._itemArray.push(item);
        }
        var lv, itemPrice;
        for (var i = 1; i <= this._itemArray.length; i++) {
            var item = this._itemArray[i - 1];
            if (!item)
                break;
            this._initItem(item, i);
            // 监听购买事件
            var btnBuy = item.getChildByName('btnMain');
            btnBuy.on(Laya.Event.CLICK, this, this._buyItem, [i]);
        }
        // 关闭按钮
        this.btnExit.on(Laya.Event.MOUSE_DOWN, this, this._btnExitDown);
        this.btnExit.on(Laya.Event.MOUSE_UP, this, this._btnExitUp);
        this.btnExit.on(Laya.Event.MOUSE_OUT, this, this._btnExitOut);
        // 更新状态
        this._refreshItemState();
    };
    Shop.prototype._initItem = function (item, i) {
        // 创建默认商店物品
        if (Consts_1.Consts.ItemResURL[i]) {
            var itemInfoBtn = new Laya.Button(Consts_1.Consts.ItemResURL[i]);
            var itemInfo = item.getChildByName('info');
            itemInfo.addChild(itemInfoBtn);
            itemInfoBtn.stateNum = 1;
            itemInfoBtn.anchorX = itemInfoBtn.anchorY = 0.5;
            itemInfoBtn.width = itemInfoBtn.height = Math.min(itemInfo.width, itemInfo.height);
            itemInfoBtn.pos(itemInfo.width / 2.0, itemInfo.height / 2.0);
        }
        // 设置无法购买
        item.disabled = true;
        // 设置等级
        var itemLvText = item.getChildByName('star').getChildByName('text');
        var lv = Player_1.default.getInstance().itemLvDict[i];
        if (lv === undefined)
            lv = 0;
        itemLvText.text = String(lv);
        // 返回信息
        var priceText = item.getChildByName('btnMain').getChildByName('text');
        priceText.text = String(Consts_1.Consts.ItemPrice[i][lv]);
    };
    Shop.prototype._buyItem = function (idx) {
        var lv = Player_1.default.getInstance().itemLvDict[idx];
        if (lv === undefined)
            lv = 0;
        var item = this._itemArray[idx - 1];
        var price = Number(Consts_1.Consts.ItemPrice[idx][lv]);
        if (Player_1.default.getInstance().gold < price)
            return;
        Player_1.default.getInstance().gold -= price;
        lv += 1;
        Player_1.default.getInstance().updateItemLvDict(idx, lv);
        var itemLvText = item.getChildByName('star').getChildByName('text');
        itemLvText.text = String(lv);
        this._refreshItemState();
    };
    Shop.prototype._refreshItemState = function () {
        // 刷新金币数
        this.goldText.text = String(Player_1.default.getInstance().gold);
        // 刷新商品可购买状态
        for (var i = 1; i <= this._itemArray.length; i++) {
            var item = this._itemArray[i - 1];
            var lv = Player_1.default.getInstance().itemLvDict[i];
            if (lv === undefined)
                lv = 0;
            var btnBuy = item.getChildByName('btnMain');
            var text = btnBuy.getChildByName('text');
            if (Player_1.default.getInstance().itemLvDict[i] >= Consts_1.Consts.ItemPrice[i].length) {
                item.disabled = true;
                text.text = 'MAX';
            }
            else {
                text.text = String(Consts_1.Consts.ItemPrice[i][lv]);
                item.disabled = Number(Consts_1.Consts.ItemPrice[i][lv]) > Player_1.default.getInstance().gold;
            }
        }
    };
    Shop.prototype._btnExitDown = function () {
        this.btnExit.skin = 'ui/exitPressed.png';
    };
    Shop.prototype._btnExitUp = function () {
        this.btnExit.skin = 'ui/exit.png';
        Laya.Scene.close('shop/Shop.scene');
    };
    Shop.prototype._btnExitOut = function () {
        this.btnExit.skin = 'ui/exit.png';
    };
    return Shop;
}(MyUI));
exports.default = Shop;
},{"../consts/Consts":22,"../consts/Player":23,"../ui/layaMaxUI":34}],32:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Spell_1 = require("./Spell");
var Consts_1 = require("../consts/Consts");
var Stats_1 = require("../consts/Stats");
var FoxStealEgg = /** @class */ (function (_super) {
    __extends(FoxStealEgg, _super);
    function FoxStealEgg(core, caster, spellGuid) {
        var _this = _super.call(this, core, caster, spellGuid, [0, Consts_1.Consts.FoxAttackWait[Consts_1.Consts.MapLevel], Consts_1.Consts.FoxAttackWait[Consts_1.Consts.MapLevel] + 500], FoxStealEgg) || this;
        _this._coopLayerGrassDict = {};
        _this._coopLayerGrassDict = {
            1: _this.core.visual.topGrass,
            2: _this.core.visual.midGrass,
            3: _this.core.visual.botGrass,
        };
        return _this;
    }
    Object.defineProperty(FoxStealEgg.prototype, "coopLayerGrassDict", {
        get: function () { return this._coopLayerGrassDict; },
        enumerable: true,
        configurable: true
    });
    FoxStealEgg.spellStart = function (spell) {
        spell.caster.visible = true;
        spell.caster.anim.play(0, false, Consts_1.MoveStates.FOX_ATK);
        var coopLayerList = [Consts_1.CoopLayer.TOP, Consts_1.CoopLayer.MID, Consts_1.CoopLayer.BOT];
        for (var foxGuid in spell.core.unitSys.foxDict) {
            var fox = spell.core.unitSys.foxDict[foxGuid];
            if (fox.visible) {
                for (var idx in coopLayerList) {
                    if (coopLayerList[idx] == fox.coopLayer) {
                        coopLayerList.splice(Number(idx), 1);
                        break;
                    }
                }
            }
        }
        spell.caster.coopLayer = coopLayerList[Math.floor(Math.random() * coopLayerList.length)];
        var directX = -1;
        if (Math.random() >= 0.5)
            directX = -1;
        var grass = spell.coopLayerGrassDict[Number(spell.caster.coopLayer)];
        spell.caster.pos(grass.x, grass.y - 20);
        var props = { x: grass.x - directX * 80, y: grass.y - 20 };
        spell.caster.anim.scale(directX, 1);
        Laya.Tween.to(spell.caster, props, 1000);
    };
    FoxStealEgg.spellHit = function (spell) {
        var layer = spell.caster.coopLayer;
        var targetIdx = null;
        var outEggList = spell.core.mapSys.outEggDict[layer];
        var eggImgList = spell.core.mapSys.eggImage[layer];
        var targetEgg = null, targetEggImg = null;
        for (var idx in outEggList) {
            var egg = outEggList[idx];
            if (egg) {
                targetIdx = idx;
                break;
            }
        }
        if (targetIdx != null) {
            // 狐狸成功偷走一个鸡蛋
            spell.core.mapSys.outEggDict[String(layer)][targetIdx] = null;
            var eggImg = spell.core.mapSys.eggImage[String(layer)][targetIdx];
            eggImg.visible = false;
            var img = new Laya.Image('egg/Egg.png');
            spell.core.visual.addChild(img);
            img.width = 30;
            img.height = 36;
            img.pos(eggImg.x, eggImg.y);
            img.zOrder = 100;
            var props = { x: spell.caster.x, y: spell.caster.y, complete: Laya.Handler.create(spell, FoxStealEgg._spellHitAnimCB, [spell, img]) };
            Laya.Tween.to(img, props, 500);
        }
    };
    FoxStealEgg._spellHitAnimCB = function (spell, img) {
        img.visible = false;
        img.destroy();
    };
    FoxStealEgg.spellEnd = function (spell) {
        var grass = spell.coopLayerGrassDict[Number(spell.caster.coopLayer)];
        var props = { x: grass.x, y: grass.y - 20, complete: Laya.Handler.create(spell, FoxStealEgg._spellEndAnimCB, [spell]) };
        Laya.Tween.to(spell.caster, props, 500);
    };
    FoxStealEgg._spellEndAnimCB = function (spell) {
        spell.caster.visible = false;
    };
    FoxStealEgg.spellBreak = function (spell) {
        console.log('spellBreak');
        Stats_1.default.countAttackFox += 1;
        Laya.stage.event(Consts_1.EventType.ATTACK_FOX);
        FoxStealEgg.spellEnd(spell);
    };
    return FoxStealEgg;
}(Spell_1.default));
exports.default = FoxStealEgg;
},{"../consts/Consts":22,"../consts/Stats":24,"./Spell":33}],33:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Consts_1 = require("../consts/Consts");
var Spell = /** @class */ (function () {
    function Spell(core, caster, spellGuid, stageTime, spellClass) {
        if (spellClass === void 0) { spellClass = Spell; }
        this.spellStageTimeDict = {};
        this.pastTime = -1; // -1是为了初始spellStage好计算
        this.core = core;
        this.caster = caster;
        this.spellGuid = spellGuid;
        this.spellClass = spellClass;
        this.spellStage = Consts_1.SpellStage.BEFORE;
        var _spellStageList = [Consts_1.SpellStage.BEFORE, Consts_1.SpellStage.START, Consts_1.SpellStage.HIT, Consts_1.SpellStage.END];
        var _spellFuncList;
        _spellFuncList = [spellClass.spellStart, spellClass.spellHit, spellClass.spellEnd];
        for (var idx in stageTime) {
            this.spellStageTimeDict[_spellStageList[idx]] = [stageTime[idx], _spellFuncList[idx], _spellStageList[Number(idx) + 1]];
        }
    }
    Spell.spellStart = function (spell) {
        console.log('spellStartXXXXXXXXXX');
    };
    Spell.spellHit = function (spell) {
    };
    Spell.spellEnd = function (spell) {
    };
    Spell.spellBreak = function (spell) {
    };
    return Spell;
}());
exports.default = Spell;
},{"../consts/Consts":22}],34:[function(require,module,exports){
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var REG = Laya.ClassUtils.regClass;
var ui;
(function (ui) {
    var combat;
    (function (combat) {
        var CombatUI = /** @class */ (function (_super) {
            __extends(CombatUI, _super);
            function CombatUI() {
                return _super.call(this) || this;
            }
            CombatUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("combat/Combat");
            };
            return CombatUI;
        }(Laya.Scene));
        combat.CombatUI = CombatUI;
        REG("ui.combat.CombatUI", CombatUI);
        var StatsLoseUI = /** @class */ (function (_super) {
            __extends(StatsLoseUI, _super);
            function StatsLoseUI() {
                return _super.call(this) || this;
            }
            StatsLoseUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("combat/StatsLose");
            };
            return StatsLoseUI;
        }(Laya.Scene));
        combat.StatsLoseUI = StatsLoseUI;
        REG("ui.combat.StatsLoseUI", StatsLoseUI);
        var StatsWinUI = /** @class */ (function (_super) {
            __extends(StatsWinUI, _super);
            function StatsWinUI() {
                return _super.call(this) || this;
            }
            StatsWinUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("combat/StatsWin");
            };
            return StatsWinUI;
        }(Laya.Scene));
        combat.StatsWinUI = StatsWinUI;
        REG("ui.combat.StatsWinUI", StatsWinUI);
    })(combat = ui.combat || (ui.combat = {}));
})(ui = exports.ui || (exports.ui = {}));
(function (ui) {
    var menu;
    (function (menu) {
        var AchieveUI = /** @class */ (function (_super) {
            __extends(AchieveUI, _super);
            function AchieveUI() {
                return _super.call(this) || this;
            }
            AchieveUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("menu/Achieve");
            };
            return AchieveUI;
        }(Laya.Dialog));
        menu.AchieveUI = AchieveUI;
        REG("ui.menu.AchieveUI", AchieveUI);
        var MenuUI = /** @class */ (function (_super) {
            __extends(MenuUI, _super);
            function MenuUI() {
                return _super.call(this) || this;
            }
            MenuUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("menu/Menu");
            };
            return MenuUI;
        }(Laya.Scene));
        menu.MenuUI = MenuUI;
        REG("ui.menu.MenuUI", MenuUI);
        var RankUI = /** @class */ (function (_super) {
            __extends(RankUI, _super);
            function RankUI() {
                return _super.call(this) || this;
            }
            RankUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("menu/Rank");
            };
            return RankUI;
        }(Laya.Dialog));
        menu.RankUI = RankUI;
        REG("ui.menu.RankUI", RankUI);
        var SettingUI = /** @class */ (function (_super) {
            __extends(SettingUI, _super);
            function SettingUI() {
                return _super.call(this) || this;
            }
            SettingUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("menu/Setting");
            };
            return SettingUI;
        }(Laya.Dialog));
        menu.SettingUI = SettingUI;
        REG("ui.menu.SettingUI", SettingUI);
    })(menu = ui.menu || (ui.menu = {}));
})(ui = exports.ui || (exports.ui = {}));
(function (ui) {
    var mission;
    (function (mission) {
        var MissionUI = /** @class */ (function (_super) {
            __extends(MissionUI, _super);
            function MissionUI() {
                return _super.call(this) || this;
            }
            MissionUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("mission/Mission");
            };
            return MissionUI;
        }(Laya.Scene));
        mission.MissionUI = MissionUI;
        REG("ui.mission.MissionUI", MissionUI);
    })(mission = ui.mission || (ui.mission = {}));
})(ui = exports.ui || (exports.ui = {}));
(function (ui) {
    var shop;
    (function (shop) {
        var ShopUI = /** @class */ (function (_super) {
            __extends(ShopUI, _super);
            function ShopUI() {
                return _super.call(this) || this;
            }
            ShopUI.prototype.createChildren = function () {
                _super.prototype.createChildren.call(this);
                this.loadScene("shop/Shop");
            };
            return ShopUI;
        }(Laya.Scene));
        shop.ShopUI = ShopUI;
        REG("ui.shop.ShopUI", ShopUI);
    })(shop = ui.shop || (ui.shop = {}));
})(ui = exports.ui || (exports.ui = {}));
},{}]},{},[2])
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
